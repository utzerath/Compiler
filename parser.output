Useless nonterminals

   VarDeclList


Terminals which are not used

   "&&"
   "||"
   "!"


Useless rules

   64 VarDeclList: /* empty */
   65            | VarDecl VarDeclList


Rules never reduced

    6 GlobalDeclList: /* empty */
    7               | VarDecl GlobalDeclList


State 0 conflicts: 2 shift/reduce, 7 reduce/reduce
State 5 conflicts: 2 shift/reduce, 7 reduce/reduce
State 18 conflicts: 7 reduce/reduce
State 80 conflicts: 12 shift/reduce
State 93 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: GlobalDeclList StmtList MainFunc FuncDeclList

    2 GlobalDeclList: /* empty */
    3               | VarDecl GlobalDeclList

    4 @1: /* empty */

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    6 GlobalDeclList: /* empty */
    7               | VarDecl GlobalDeclList

    8 SetFunctionName: ID

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

   10 ReturnType: VOID
   11           | TYPE

   12 FuncDeclList: /* empty */
   13             | FuncDecl FuncDeclList

   14 scope_enter: /* empty */

   15 scope_exit: /* empty */

   16 Param: TYPE ID

   17 ParamList: /* empty */
   18          | Param
   19          | Param COMMA ParamList

   20 ReturnStmt: RETURN Expr SEMICOLON
   21           | RETURN SEMICOLON
   22           | /* empty */

   23 VarDecl: Type ID SEMICOLON
   24        | Type ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

   25 StmtList: /* empty */
   26         | Stmt StmtList
   27         | VarDecl StmtList

   28 Stmt: LValue EQ Expr SEMICOLON
   29     | WRITE Expr SEMICOLON
   30     | FuncCall SEMICOLON
   31     | OPEN_BRACE StmtList CLOSE_BRACE
   32     | IfStmt

   33 Type: TYPE
   34     | TYPE_BOOL

   35 IfStmt: IF OPEN_PAREN Expr CLOSE_PAREN Stmt
   36       | IF OPEN_PAREN Expr CLOSE_PAREN Stmt ELSE Stmt

   37 LValue: ID
   38       | ID OPEN_BRACKET Expr CLOSE_BRACKET

   39 Expr: FuncCall
   40     | Expr BinOp Expr
   41     | Expr AND Expr
   42     | Expr OR Expr
   43     | NOT Expr
   44     | Expr EQUALS Expr
   45     | Expr NOT_EQUALS Expr
   46     | Expr LESS_THAN Expr
   47     | Expr GREATER_THAN Expr
   48     | Expr LESS_EQUAL Expr
   49     | Expr GREATER_EQUAL Expr
   50     | BOOL_LITERAL
   51     | NUMBER
   52     | FLOAT_LITERAL
   53     | ID
   54     | ID OPEN_BRACKET Expr CLOSE_BRACKET
   55     | OPEN_PAREN Expr CLOSE_PAREN

   56 FuncCall: ID OPEN_PAREN ArgList CLOSE_PAREN

   57 ArgList: /* empty */
   58        | Expr
   59        | Expr COMMA ArgList

   60 BinOp: PLUS
   61      | MINUS
   62      | MULTIPLY
   63      | DIVIDE


Terminals, with rules where they appear

$end (0) 0
error (256)
TYPE (258) 11 16 33
NUMBER (259) 24 51
FLOAT_LITERAL (260) 52
SEMICOLON (261) 20 21 23 24 28 29 30
EQ (262) 28
PLUS (263) 60
MINUS (264) 61
MULTIPLY (265) 62
DIVIDE (266) 63
WRITE (267) 29
OPEN_BRACE (268) 5 9 31
CLOSE_BRACE (269) 5 9 31
OPEN_PAREN (270) 5 9 35 36 55 56
CLOSE_PAREN (271) 5 9 35 36 55 56
ID (272) 8 16 23 24 37 38 53 54 56
OPEN_BRACKET (273) 24 38 54
CLOSE_BRACKET (274) 24 38 54
RETURN (275) 20 21
VOID (276) 5 10
COMMA (277) 19 59
MAIN (278) 5
BOOL_LITERAL (279) 50
TYPE_BOOL (280) 34
"&&" (281)
"||" (282)
"!" (283)
IF (284) 35 36
ELSE (285) 36
AND (286) 41
OR (287) 42
NOT (288) 43
EQUALS (289) 44
NOT_EQUALS (290) 45
LESS_THAN (291) 46
GREATER_THAN (292) 47
LESS_EQUAL (293) 48
GREATER_EQUAL (294) 49


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
Program (41)
    on left: 1, on right: 0
GlobalDeclList (42)
    on left: 2 3 6 7, on right: 1 3 7
MainFunc (43)
    on left: 5, on right: 1
@1 (44)
    on left: 4, on right: 5
SetFunctionName (45)
    on left: 8, on right: 9
FuncDecl (46)
    on left: 9, on right: 13
ReturnType (47)
    on left: 10 11, on right: 9
FuncDeclList (48)
    on left: 12 13, on right: 1 13
scope_enter (49)
    on left: 14, on right: 5 9
scope_exit (50)
    on left: 15, on right: 5 9
Param (51)
    on left: 16, on right: 18 19
ParamList (52)
    on left: 17 18 19, on right: 9 19
ReturnStmt (53)
    on left: 20 21 22, on right: 9
VarDecl (54)
    on left: 23 24, on right: 3 7 27
StmtList (55)
    on left: 25 26 27, on right: 1 5 9 26 27 31
Stmt (56)
    on left: 28 29 30 31 32, on right: 26 35 36
Type (57)
    on left: 33 34, on right: 23 24
IfStmt (58)
    on left: 35 36, on right: 32
LValue (59)
    on left: 37 38, on right: 28
Expr (60)
    on left: 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55,
    on right: 20 28 29 35 36 38 40 41 42 43 44 45 46 47 48 49 54 55
    58 59
FuncCall (61)
    on left: 56, on right: 30 39
ArgList (62)
    on left: 57 58 59, on right: 56 59
BinOp (63)
    on left: 60 61 62 63, on right: 40


state 0

    0 $accept: . Program $end

    TYPE       shift, and go to state 1
    TYPE_BOOL  shift, and go to state 2

    TYPE        [reduce using rule 2 (GlobalDeclList)]
    TYPE        [reduce using rule 6 (GlobalDeclList)]
    WRITE       reduce using rule 2 (GlobalDeclList)
    WRITE       [reduce using rule 6 (GlobalDeclList)]
    OPEN_BRACE  reduce using rule 2 (GlobalDeclList)
    OPEN_BRACE  [reduce using rule 6 (GlobalDeclList)]
    ID          reduce using rule 2 (GlobalDeclList)
    ID          [reduce using rule 6 (GlobalDeclList)]
    VOID        reduce using rule 2 (GlobalDeclList)
    VOID        [reduce using rule 6 (GlobalDeclList)]
    TYPE_BOOL   [reduce using rule 2 (GlobalDeclList)]
    TYPE_BOOL   [reduce using rule 6 (GlobalDeclList)]
    IF          reduce using rule 2 (GlobalDeclList)
    IF          [reduce using rule 6 (GlobalDeclList)]
    $default    reduce using rule 2 (GlobalDeclList)

    Program         go to state 3
    GlobalDeclList  go to state 4
    VarDecl         go to state 5
    Type            go to state 6


state 1

   33 Type: TYPE .

    $default  reduce using rule 33 (Type)


state 2

   34 Type: TYPE_BOOL .

    $default  reduce using rule 34 (Type)


state 3

    0 $accept: Program . $end

    $end  shift, and go to state 7


state 4

    1 Program: GlobalDeclList . StmtList MainFunc FuncDeclList

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 11

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 12
    StmtList  go to state 13
    Stmt      go to state 14
    Type      go to state 6
    IfStmt    go to state 15
    LValue    go to state 16
    FuncCall  go to state 17


state 5

    3 GlobalDeclList: VarDecl . GlobalDeclList
    7               | VarDecl . GlobalDeclList

    TYPE       shift, and go to state 1
    TYPE_BOOL  shift, and go to state 2

    TYPE        [reduce using rule 2 (GlobalDeclList)]
    TYPE        [reduce using rule 6 (GlobalDeclList)]
    WRITE       reduce using rule 2 (GlobalDeclList)
    WRITE       [reduce using rule 6 (GlobalDeclList)]
    OPEN_BRACE  reduce using rule 2 (GlobalDeclList)
    OPEN_BRACE  [reduce using rule 6 (GlobalDeclList)]
    ID          reduce using rule 2 (GlobalDeclList)
    ID          [reduce using rule 6 (GlobalDeclList)]
    VOID        reduce using rule 2 (GlobalDeclList)
    VOID        [reduce using rule 6 (GlobalDeclList)]
    TYPE_BOOL   [reduce using rule 2 (GlobalDeclList)]
    TYPE_BOOL   [reduce using rule 6 (GlobalDeclList)]
    IF          reduce using rule 2 (GlobalDeclList)
    IF          [reduce using rule 6 (GlobalDeclList)]
    $default    reduce using rule 2 (GlobalDeclList)

    GlobalDeclList  go to state 18
    VarDecl         go to state 5
    Type            go to state 6


state 6

   23 VarDecl: Type . ID SEMICOLON
   24        | Type . ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

    ID  shift, and go to state 19


state 7

    0 $accept: Program $end .

    $default  accept


state 8

   29 Stmt: WRITE . Expr SEMICOLON

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 26
    FuncCall  go to state 27


state 9

   31 Stmt: OPEN_BRACE . StmtList CLOSE_BRACE

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 11

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 12
    StmtList  go to state 28
    Stmt      go to state 14
    Type      go to state 6
    IfStmt    go to state 15
    LValue    go to state 16
    FuncCall  go to state 17


state 10

   37 LValue: ID .
   38       | ID . OPEN_BRACKET Expr CLOSE_BRACKET
   56 FuncCall: ID . OPEN_PAREN ArgList CLOSE_PAREN

    OPEN_PAREN    shift, and go to state 29
    OPEN_BRACKET  shift, and go to state 30

    $default  reduce using rule 37 (LValue)


state 11

   35 IfStmt: IF . OPEN_PAREN Expr CLOSE_PAREN Stmt
   36       | IF . OPEN_PAREN Expr CLOSE_PAREN Stmt ELSE Stmt

    OPEN_PAREN  shift, and go to state 31


state 12

   27 StmtList: VarDecl . StmtList

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 11

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 12
    StmtList  go to state 32
    Stmt      go to state 14
    Type      go to state 6
    IfStmt    go to state 15
    LValue    go to state 16
    FuncCall  go to state 17


state 13

    1 Program: GlobalDeclList StmtList . MainFunc FuncDeclList

    VOID  shift, and go to state 33

    MainFunc  go to state 34


state 14

   26 StmtList: Stmt . StmtList

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 11

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 12
    StmtList  go to state 35
    Stmt      go to state 14
    Type      go to state 6
    IfStmt    go to state 15
    LValue    go to state 16
    FuncCall  go to state 17


state 15

   32 Stmt: IfStmt .

    $default  reduce using rule 32 (Stmt)


state 16

   28 Stmt: LValue . EQ Expr SEMICOLON

    EQ  shift, and go to state 36


state 17

   30 Stmt: FuncCall . SEMICOLON

    SEMICOLON  shift, and go to state 37


state 18

    3 GlobalDeclList: VarDecl GlobalDeclList .
    7               | VarDecl GlobalDeclList .

    TYPE        reduce using rule 3 (GlobalDeclList)
    TYPE        [reduce using rule 7 (GlobalDeclList)]
    WRITE       reduce using rule 3 (GlobalDeclList)
    WRITE       [reduce using rule 7 (GlobalDeclList)]
    OPEN_BRACE  reduce using rule 3 (GlobalDeclList)
    OPEN_BRACE  [reduce using rule 7 (GlobalDeclList)]
    ID          reduce using rule 3 (GlobalDeclList)
    ID          [reduce using rule 7 (GlobalDeclList)]
    VOID        reduce using rule 3 (GlobalDeclList)
    VOID        [reduce using rule 7 (GlobalDeclList)]
    TYPE_BOOL   reduce using rule 3 (GlobalDeclList)
    TYPE_BOOL   [reduce using rule 7 (GlobalDeclList)]
    IF          reduce using rule 3 (GlobalDeclList)
    IF          [reduce using rule 7 (GlobalDeclList)]
    $default    reduce using rule 3 (GlobalDeclList)


state 19

   23 VarDecl: Type ID . SEMICOLON
   24        | Type ID . OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

    SEMICOLON     shift, and go to state 38
    OPEN_BRACKET  shift, and go to state 39


state 20

   51 Expr: NUMBER .

    $default  reduce using rule 51 (Expr)


state 21

   52 Expr: FLOAT_LITERAL .

    $default  reduce using rule 52 (Expr)


state 22

   55 Expr: OPEN_PAREN . Expr CLOSE_PAREN

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 40
    FuncCall  go to state 27


state 23

   53 Expr: ID .
   54     | ID . OPEN_BRACKET Expr CLOSE_BRACKET
   56 FuncCall: ID . OPEN_PAREN ArgList CLOSE_PAREN

    OPEN_PAREN    shift, and go to state 29
    OPEN_BRACKET  shift, and go to state 41

    $default  reduce using rule 53 (Expr)


state 24

   50 Expr: BOOL_LITERAL .

    $default  reduce using rule 50 (Expr)


state 25

   43 Expr: NOT . Expr

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 42
    FuncCall  go to state 27


state 26

   29 Stmt: WRITE Expr . SEMICOLON
   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    SEMICOLON      shift, and go to state 43
    PLUS           shift, and go to state 44
    MINUS          shift, and go to state 45
    MULTIPLY       shift, and go to state 46
    DIVIDE         shift, and go to state 47
    AND            shift, and go to state 48
    OR             shift, and go to state 49
    EQUALS         shift, and go to state 50
    NOT_EQUALS     shift, and go to state 51
    LESS_THAN      shift, and go to state 52
    GREATER_THAN   shift, and go to state 53
    LESS_EQUAL     shift, and go to state 54
    GREATER_EQUAL  shift, and go to state 55

    BinOp  go to state 56


state 27

   39 Expr: FuncCall .

    $default  reduce using rule 39 (Expr)


state 28

   31 Stmt: OPEN_BRACE StmtList . CLOSE_BRACE

    CLOSE_BRACE  shift, and go to state 57


state 29

   56 FuncCall: ID OPEN_PAREN . ArgList CLOSE_PAREN

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    $default  reduce using rule 57 (ArgList)

    Expr      go to state 58
    FuncCall  go to state 27
    ArgList   go to state 59


state 30

   38 LValue: ID OPEN_BRACKET . Expr CLOSE_BRACKET

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 60
    FuncCall  go to state 27


state 31

   35 IfStmt: IF OPEN_PAREN . Expr CLOSE_PAREN Stmt
   36       | IF OPEN_PAREN . Expr CLOSE_PAREN Stmt ELSE Stmt

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 61
    FuncCall  go to state 27


state 32

   27 StmtList: VarDecl StmtList .

    $default  reduce using rule 27 (StmtList)


state 33

    5 MainFunc: VOID . MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    MAIN  shift, and go to state 62


state 34

    1 Program: GlobalDeclList StmtList MainFunc . FuncDeclList

    TYPE  shift, and go to state 63
    VOID  shift, and go to state 64

    $default  reduce using rule 12 (FuncDeclList)

    FuncDecl      go to state 65
    ReturnType    go to state 66
    FuncDeclList  go to state 67


state 35

   26 StmtList: Stmt StmtList .

    $default  reduce using rule 26 (StmtList)


state 36

   28 Stmt: LValue EQ . Expr SEMICOLON

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 68
    FuncCall  go to state 27


state 37

   30 Stmt: FuncCall SEMICOLON .

    $default  reduce using rule 30 (Stmt)


state 38

   23 VarDecl: Type ID SEMICOLON .

    $default  reduce using rule 23 (VarDecl)


state 39

   24 VarDecl: Type ID OPEN_BRACKET . NUMBER CLOSE_BRACKET SEMICOLON

    NUMBER  shift, and go to state 69


state 40

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr
   55     | OPEN_PAREN Expr . CLOSE_PAREN

    PLUS           shift, and go to state 44
    MINUS          shift, and go to state 45
    MULTIPLY       shift, and go to state 46
    DIVIDE         shift, and go to state 47
    CLOSE_PAREN    shift, and go to state 70
    AND            shift, and go to state 48
    OR             shift, and go to state 49
    EQUALS         shift, and go to state 50
    NOT_EQUALS     shift, and go to state 51
    LESS_THAN      shift, and go to state 52
    GREATER_THAN   shift, and go to state 53
    LESS_EQUAL     shift, and go to state 54
    GREATER_EQUAL  shift, and go to state 55

    BinOp  go to state 56


state 41

   54 Expr: ID OPEN_BRACKET . Expr CLOSE_BRACKET

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 71
    FuncCall  go to state 27


state 42

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   43     | NOT Expr .
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    $default  reduce using rule 43 (Expr)

    BinOp  go to state 56


state 43

   29 Stmt: WRITE Expr SEMICOLON .

    $default  reduce using rule 29 (Stmt)


state 44

   60 BinOp: PLUS .

    $default  reduce using rule 60 (BinOp)


state 45

   61 BinOp: MINUS .

    $default  reduce using rule 61 (BinOp)


state 46

   62 BinOp: MULTIPLY .

    $default  reduce using rule 62 (BinOp)


state 47

   63 BinOp: DIVIDE .

    $default  reduce using rule 63 (BinOp)


state 48

   41 Expr: Expr AND . Expr

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 72
    FuncCall  go to state 27


state 49

   42 Expr: Expr OR . Expr

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 73
    FuncCall  go to state 27


state 50

   44 Expr: Expr EQUALS . Expr

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 74
    FuncCall  go to state 27


state 51

   45 Expr: Expr NOT_EQUALS . Expr

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 75
    FuncCall  go to state 27


state 52

   46 Expr: Expr LESS_THAN . Expr

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 76
    FuncCall  go to state 27


state 53

   47 Expr: Expr GREATER_THAN . Expr

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 77
    FuncCall  go to state 27


state 54

   48 Expr: Expr LESS_EQUAL . Expr

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 78
    FuncCall  go to state 27


state 55

   49 Expr: Expr GREATER_EQUAL . Expr

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 79
    FuncCall  go to state 27


state 56

   40 Expr: Expr BinOp . Expr

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 80
    FuncCall  go to state 27


state 57

   31 Stmt: OPEN_BRACE StmtList CLOSE_BRACE .

    $default  reduce using rule 31 (Stmt)


state 58

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr
   58 ArgList: Expr .
   59        | Expr . COMMA ArgList

    PLUS           shift, and go to state 44
    MINUS          shift, and go to state 45
    MULTIPLY       shift, and go to state 46
    DIVIDE         shift, and go to state 47
    COMMA          shift, and go to state 81
    AND            shift, and go to state 48
    OR             shift, and go to state 49
    EQUALS         shift, and go to state 50
    NOT_EQUALS     shift, and go to state 51
    LESS_THAN      shift, and go to state 52
    GREATER_THAN   shift, and go to state 53
    LESS_EQUAL     shift, and go to state 54
    GREATER_EQUAL  shift, and go to state 55

    $default  reduce using rule 58 (ArgList)

    BinOp  go to state 56


state 59

   56 FuncCall: ID OPEN_PAREN ArgList . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 82


state 60

   38 LValue: ID OPEN_BRACKET Expr . CLOSE_BRACKET
   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    PLUS           shift, and go to state 44
    MINUS          shift, and go to state 45
    MULTIPLY       shift, and go to state 46
    DIVIDE         shift, and go to state 47
    CLOSE_BRACKET  shift, and go to state 83
    AND            shift, and go to state 48
    OR             shift, and go to state 49
    EQUALS         shift, and go to state 50
    NOT_EQUALS     shift, and go to state 51
    LESS_THAN      shift, and go to state 52
    GREATER_THAN   shift, and go to state 53
    LESS_EQUAL     shift, and go to state 54
    GREATER_EQUAL  shift, and go to state 55

    BinOp  go to state 56


state 61

   35 IfStmt: IF OPEN_PAREN Expr . CLOSE_PAREN Stmt
   36       | IF OPEN_PAREN Expr . CLOSE_PAREN Stmt ELSE Stmt
   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    PLUS           shift, and go to state 44
    MINUS          shift, and go to state 45
    MULTIPLY       shift, and go to state 46
    DIVIDE         shift, and go to state 47
    CLOSE_PAREN    shift, and go to state 84
    AND            shift, and go to state 48
    OR             shift, and go to state 49
    EQUALS         shift, and go to state 50
    NOT_EQUALS     shift, and go to state 51
    LESS_THAN      shift, and go to state 52
    GREATER_THAN   shift, and go to state 53
    LESS_EQUAL     shift, and go to state 54
    GREATER_EQUAL  shift, and go to state 55

    BinOp  go to state 56


state 62

    5 MainFunc: VOID MAIN . OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    OPEN_PAREN  shift, and go to state 85


state 63

   11 ReturnType: TYPE .

    $default  reduce using rule 11 (ReturnType)


state 64

   10 ReturnType: VOID .

    $default  reduce using rule 10 (ReturnType)


state 65

   13 FuncDeclList: FuncDecl . FuncDeclList

    TYPE  shift, and go to state 63
    VOID  shift, and go to state 64

    $default  reduce using rule 12 (FuncDeclList)

    FuncDecl      go to state 65
    ReturnType    go to state 66
    FuncDeclList  go to state 86


state 66

    9 FuncDecl: ReturnType . SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    ID  shift, and go to state 87

    SetFunctionName  go to state 88


state 67

    1 Program: GlobalDeclList StmtList MainFunc FuncDeclList .

    $default  reduce using rule 1 (Program)


state 68

   28 Stmt: LValue EQ Expr . SEMICOLON
   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    SEMICOLON      shift, and go to state 89
    PLUS           shift, and go to state 44
    MINUS          shift, and go to state 45
    MULTIPLY       shift, and go to state 46
    DIVIDE         shift, and go to state 47
    AND            shift, and go to state 48
    OR             shift, and go to state 49
    EQUALS         shift, and go to state 50
    NOT_EQUALS     shift, and go to state 51
    LESS_THAN      shift, and go to state 52
    GREATER_THAN   shift, and go to state 53
    LESS_EQUAL     shift, and go to state 54
    GREATER_EQUAL  shift, and go to state 55

    BinOp  go to state 56


state 69

   24 VarDecl: Type ID OPEN_BRACKET NUMBER . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET  shift, and go to state 90


state 70

   55 Expr: OPEN_PAREN Expr CLOSE_PAREN .

    $default  reduce using rule 55 (Expr)


state 71

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr
   54     | ID OPEN_BRACKET Expr . CLOSE_BRACKET

    PLUS           shift, and go to state 44
    MINUS          shift, and go to state 45
    MULTIPLY       shift, and go to state 46
    DIVIDE         shift, and go to state 47
    CLOSE_BRACKET  shift, and go to state 91
    AND            shift, and go to state 48
    OR             shift, and go to state 49
    EQUALS         shift, and go to state 50
    NOT_EQUALS     shift, and go to state 51
    LESS_THAN      shift, and go to state 52
    GREATER_THAN   shift, and go to state 53
    LESS_EQUAL     shift, and go to state 54
    GREATER_EQUAL  shift, and go to state 55

    BinOp  go to state 56


state 72

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   41     | Expr AND Expr .
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    PLUS           shift, and go to state 44
    MINUS          shift, and go to state 45
    MULTIPLY       shift, and go to state 46
    DIVIDE         shift, and go to state 47
    EQUALS         shift, and go to state 50
    NOT_EQUALS     shift, and go to state 51
    LESS_THAN      shift, and go to state 52
    GREATER_THAN   shift, and go to state 53
    LESS_EQUAL     shift, and go to state 54
    GREATER_EQUAL  shift, and go to state 55

    $default  reduce using rule 41 (Expr)

    BinOp  go to state 56


state 73

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   42     | Expr OR Expr .
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    PLUS           shift, and go to state 44
    MINUS          shift, and go to state 45
    MULTIPLY       shift, and go to state 46
    DIVIDE         shift, and go to state 47
    AND            shift, and go to state 48
    EQUALS         shift, and go to state 50
    NOT_EQUALS     shift, and go to state 51
    LESS_THAN      shift, and go to state 52
    GREATER_THAN   shift, and go to state 53
    LESS_EQUAL     shift, and go to state 54
    GREATER_EQUAL  shift, and go to state 55

    $default  reduce using rule 42 (Expr)

    BinOp  go to state 56


state 74

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   44     | Expr EQUALS Expr .
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    PLUS      shift, and go to state 44
    MINUS     shift, and go to state 45
    MULTIPLY  shift, and go to state 46
    DIVIDE    shift, and go to state 47

    $default  reduce using rule 44 (Expr)

    BinOp  go to state 56


state 75

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   45     | Expr NOT_EQUALS Expr .
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    PLUS      shift, and go to state 44
    MINUS     shift, and go to state 45
    MULTIPLY  shift, and go to state 46
    DIVIDE    shift, and go to state 47

    $default  reduce using rule 45 (Expr)

    BinOp  go to state 56


state 76

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   46     | Expr LESS_THAN Expr .
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    PLUS      shift, and go to state 44
    MINUS     shift, and go to state 45
    MULTIPLY  shift, and go to state 46
    DIVIDE    shift, and go to state 47

    $default  reduce using rule 46 (Expr)

    BinOp  go to state 56


state 77

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   47     | Expr GREATER_THAN Expr .
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    PLUS      shift, and go to state 44
    MINUS     shift, and go to state 45
    MULTIPLY  shift, and go to state 46
    DIVIDE    shift, and go to state 47

    $default  reduce using rule 47 (Expr)

    BinOp  go to state 56


state 78

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   48     | Expr LESS_EQUAL Expr .
   49     | Expr . GREATER_EQUAL Expr

    PLUS      shift, and go to state 44
    MINUS     shift, and go to state 45
    MULTIPLY  shift, and go to state 46
    DIVIDE    shift, and go to state 47

    $default  reduce using rule 48 (Expr)

    BinOp  go to state 56


state 79

   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr
   49     | Expr GREATER_EQUAL Expr .

    PLUS      shift, and go to state 44
    MINUS     shift, and go to state 45
    MULTIPLY  shift, and go to state 46
    DIVIDE    shift, and go to state 47

    $default  reduce using rule 49 (Expr)

    BinOp  go to state 56


state 80

   40 Expr: Expr . BinOp Expr
   40     | Expr BinOp Expr .
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    PLUS           shift, and go to state 44
    MINUS          shift, and go to state 45
    MULTIPLY       shift, and go to state 46
    DIVIDE         shift, and go to state 47
    AND            shift, and go to state 48
    OR             shift, and go to state 49
    EQUALS         shift, and go to state 50
    NOT_EQUALS     shift, and go to state 51
    LESS_THAN      shift, and go to state 52
    GREATER_THAN   shift, and go to state 53
    LESS_EQUAL     shift, and go to state 54
    GREATER_EQUAL  shift, and go to state 55

    PLUS           [reduce using rule 40 (Expr)]
    MINUS          [reduce using rule 40 (Expr)]
    MULTIPLY       [reduce using rule 40 (Expr)]
    DIVIDE         [reduce using rule 40 (Expr)]
    AND            [reduce using rule 40 (Expr)]
    OR             [reduce using rule 40 (Expr)]
    EQUALS         [reduce using rule 40 (Expr)]
    NOT_EQUALS     [reduce using rule 40 (Expr)]
    LESS_THAN      [reduce using rule 40 (Expr)]
    GREATER_THAN   [reduce using rule 40 (Expr)]
    LESS_EQUAL     [reduce using rule 40 (Expr)]
    GREATER_EQUAL  [reduce using rule 40 (Expr)]
    $default       reduce using rule 40 (Expr)

    BinOp  go to state 56


state 81

   59 ArgList: Expr COMMA . ArgList

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    $default  reduce using rule 57 (ArgList)

    Expr      go to state 58
    FuncCall  go to state 27
    ArgList   go to state 92


state 82

   56 FuncCall: ID OPEN_PAREN ArgList CLOSE_PAREN .

    $default  reduce using rule 56 (FuncCall)


state 83

   38 LValue: ID OPEN_BRACKET Expr CLOSE_BRACKET .

    $default  reduce using rule 38 (LValue)


state 84

   35 IfStmt: IF OPEN_PAREN Expr CLOSE_PAREN . Stmt
   36       | IF OPEN_PAREN Expr CLOSE_PAREN . Stmt ELSE Stmt

    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    IF          shift, and go to state 11

    Stmt      go to state 93
    IfStmt    go to state 15
    LValue    go to state 16
    FuncCall  go to state 17


state 85

    5 MainFunc: VOID MAIN OPEN_PAREN . CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    CLOSE_PAREN  shift, and go to state 94


state 86

   13 FuncDeclList: FuncDecl FuncDeclList .

    $default  reduce using rule 13 (FuncDeclList)


state 87

    8 SetFunctionName: ID .

    $default  reduce using rule 8 (SetFunctionName)


state 88

    9 FuncDecl: ReturnType SetFunctionName . OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    OPEN_PAREN  shift, and go to state 95


state 89

   28 Stmt: LValue EQ Expr SEMICOLON .

    $default  reduce using rule 28 (Stmt)


state 90

   24 VarDecl: Type ID OPEN_BRACKET NUMBER CLOSE_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 96


state 91

   54 Expr: ID OPEN_BRACKET Expr CLOSE_BRACKET .

    $default  reduce using rule 54 (Expr)


state 92

   59 ArgList: Expr COMMA ArgList .

    $default  reduce using rule 59 (ArgList)


state 93

   35 IfStmt: IF OPEN_PAREN Expr CLOSE_PAREN Stmt .
   36       | IF OPEN_PAREN Expr CLOSE_PAREN Stmt . ELSE Stmt

    ELSE  shift, and go to state 97

    ELSE      [reduce using rule 35 (IfStmt)]
    $default  reduce using rule 35 (IfStmt)


state 94

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN . @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    $default  reduce using rule 4 (@1)

    @1  go to state 98


state 95

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN . scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    $default  reduce using rule 14 (scope_enter)

    scope_enter  go to state 99


state 96

   24 VarDecl: Type ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON .

    $default  reduce using rule 24 (VarDecl)


state 97

   36 IfStmt: IF OPEN_PAREN Expr CLOSE_PAREN Stmt ELSE . Stmt

    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    IF          shift, and go to state 11

    Stmt      go to state 100
    IfStmt    go to state 15
    LValue    go to state 16
    FuncCall  go to state 17


state 98

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 . scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    $default  reduce using rule 14 (scope_enter)

    scope_enter  go to state 101


state 99

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter . ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    TYPE  shift, and go to state 102

    $default  reduce using rule 17 (ParamList)

    Param      go to state 103
    ParamList  go to state 104


state 100

   36 IfStmt: IF OPEN_PAREN Expr CLOSE_PAREN Stmt ELSE Stmt .

    $default  reduce using rule 36 (IfStmt)


state 101

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter . OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    OPEN_BRACE  shift, and go to state 105


state 102

   16 Param: TYPE . ID

    ID  shift, and go to state 106


state 103

   18 ParamList: Param .
   19          | Param . COMMA ParamList

    COMMA  shift, and go to state 107

    $default  reduce using rule 18 (ParamList)


state 104

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList . CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    CLOSE_PAREN  shift, and go to state 108


state 105

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE . StmtList CLOSE_BRACE scope_exit

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 11

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 12
    StmtList  go to state 109
    Stmt      go to state 14
    Type      go to state 6
    IfStmt    go to state 15
    LValue    go to state 16
    FuncCall  go to state 17


state 106

   16 Param: TYPE ID .

    $default  reduce using rule 16 (Param)


state 107

   19 ParamList: Param COMMA . ParamList

    TYPE  shift, and go to state 102

    $default  reduce using rule 17 (ParamList)

    Param      go to state 103
    ParamList  go to state 110


state 108

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN . OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    OPEN_BRACE  shift, and go to state 111


state 109

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList . CLOSE_BRACE scope_exit

    CLOSE_BRACE  shift, and go to state 112


state 110

   19 ParamList: Param COMMA ParamList .

    $default  reduce using rule 19 (ParamList)


state 111

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE . StmtList ReturnStmt CLOSE_BRACE scope_exit

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 11

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 12
    StmtList  go to state 113
    Stmt      go to state 14
    Type      go to state 6
    IfStmt    go to state 15
    LValue    go to state 16
    FuncCall  go to state 17


state 112

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE . scope_exit

    $default  reduce using rule 15 (scope_exit)

    scope_exit  go to state 114


state 113

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList . ReturnStmt CLOSE_BRACE scope_exit

    RETURN  shift, and go to state 115

    $default  reduce using rule 22 (ReturnStmt)

    ReturnStmt  go to state 116


state 114

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit .

    $default  reduce using rule 5 (MainFunc)


state 115

   20 ReturnStmt: RETURN . Expr SEMICOLON
   21           | RETURN . SEMICOLON

    NUMBER         shift, and go to state 20
    FLOAT_LITERAL  shift, and go to state 21
    SEMICOLON      shift, and go to state 117
    OPEN_PAREN     shift, and go to state 22
    ID             shift, and go to state 23
    BOOL_LITERAL   shift, and go to state 24
    NOT            shift, and go to state 25

    Expr      go to state 118
    FuncCall  go to state 27


state 116

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt . CLOSE_BRACE scope_exit

    CLOSE_BRACE  shift, and go to state 119


state 117

   21 ReturnStmt: RETURN SEMICOLON .

    $default  reduce using rule 21 (ReturnStmt)


state 118

   20 ReturnStmt: RETURN Expr . SEMICOLON
   40 Expr: Expr . BinOp Expr
   41     | Expr . AND Expr
   42     | Expr . OR Expr
   44     | Expr . EQUALS Expr
   45     | Expr . NOT_EQUALS Expr
   46     | Expr . LESS_THAN Expr
   47     | Expr . GREATER_THAN Expr
   48     | Expr . LESS_EQUAL Expr
   49     | Expr . GREATER_EQUAL Expr

    SEMICOLON      shift, and go to state 120
    PLUS           shift, and go to state 44
    MINUS          shift, and go to state 45
    MULTIPLY       shift, and go to state 46
    DIVIDE         shift, and go to state 47
    AND            shift, and go to state 48
    OR             shift, and go to state 49
    EQUALS         shift, and go to state 50
    NOT_EQUALS     shift, and go to state 51
    LESS_THAN      shift, and go to state 52
    GREATER_THAN   shift, and go to state 53
    LESS_EQUAL     shift, and go to state 54
    GREATER_EQUAL  shift, and go to state 55

    BinOp  go to state 56


state 119

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE . scope_exit

    $default  reduce using rule 15 (scope_exit)

    scope_exit  go to state 121


state 120

   20 ReturnStmt: RETURN Expr SEMICOLON .

    $default  reduce using rule 20 (ReturnStmt)


state 121

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit .

    $default  reduce using rule 9 (FuncDecl)
