Useless nonterminals

   VarDeclList


Useless rules

   49 VarDeclList: /* empty */
   50            | VarDecl VarDeclList


Rules never reduced

    6 GlobalDeclList: /* empty */
    7               | VarDecl GlobalDeclList


State 0 conflicts: 1 shift/reduce, 5 reduce/reduce
State 4 conflicts: 1 shift/reduce, 5 reduce/reduce
State 15 conflicts: 5 reduce/reduce
State 56 conflicts: 4 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: GlobalDeclList StmtList MainFunc FuncDeclList

    2 GlobalDeclList: /* empty */
    3               | VarDecl GlobalDeclList

    4 @1: /* empty */

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    6 GlobalDeclList: /* empty */
    7               | VarDecl GlobalDeclList

    8 SetFunctionName: ID

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

   10 ReturnType: VOID
   11           | TYPE

   12 FuncDeclList: /* empty */
   13             | FuncDecl FuncDeclList

   14 scope_enter: /* empty */

   15 scope_exit: /* empty */

   16 Param: TYPE ID

   17 ParamList: /* empty */
   18          | Param
   19          | Param COMMA ParamList

   20 ReturnStmt: RETURN Expr SEMICOLON
   21           | RETURN SEMICOLON
   22           | /* empty */

   23 VarDecl: TYPE ID SEMICOLON
   24        | TYPE ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

   25 StmtList: /* empty */
   26         | Stmt StmtList
   27         | VarDecl StmtList

   28 Stmt: LValue EQ Expr SEMICOLON
   29     | WRITE Expr SEMICOLON
   30     | FuncCall SEMICOLON
   31     | OPEN_BRACE StmtList CLOSE_BRACE

   32 LValue: ID
   33       | ID OPEN_BRACKET Expr CLOSE_BRACKET

   34 Expr: FuncCall
   35     | Expr BinOp Expr
   36     | NUMBER
   37     | FLOAT_LITERAL
   38     | ID
   39     | ID OPEN_BRACKET Expr CLOSE_BRACKET
   40     | OPEN_PAREN Expr CLOSE_PAREN

   41 FuncCall: ID OPEN_PAREN ArgList CLOSE_PAREN

   42 ArgList: /* empty */
   43        | Expr
   44        | Expr COMMA ArgList

   45 BinOp: PLUS
   46      | MINUS
   47      | MULTIPLY
   48      | DIVIDE


Terminals, with rules where they appear

$end (0) 0
error (256)
TYPE (258) 11 16 23 24
NUMBER (259) 24 36
FLOAT_LITERAL (260) 37
SEMICOLON (261) 20 21 23 24 28 29 30
EQ (262) 28
PLUS (263) 45
MINUS (264) 46
MULTIPLY (265) 47
DIVIDE (266) 48
WRITE (267) 29
OPEN_BRACE (268) 5 9 31
CLOSE_BRACE (269) 5 9 31
OPEN_PAREN (270) 5 9 40 41
CLOSE_PAREN (271) 5 9 40 41
ID (272) 8 16 23 24 32 33 38 39 41
OPEN_BRACKET (273) 24 33 39
CLOSE_BRACKET (274) 24 33 39
RETURN (275) 20 21
VOID (276) 5 10
COMMA (277) 19 44
MAIN (278) 5


Nonterminals, with rules where they appear

$accept (24)
    on left: 0
Program (25)
    on left: 1, on right: 0
GlobalDeclList (26)
    on left: 2 3 6 7, on right: 1 3 7
MainFunc (27)
    on left: 5, on right: 1
@1 (28)
    on left: 4, on right: 5
SetFunctionName (29)
    on left: 8, on right: 9
FuncDecl (30)
    on left: 9, on right: 13
ReturnType (31)
    on left: 10 11, on right: 9
FuncDeclList (32)
    on left: 12 13, on right: 1 13
scope_enter (33)
    on left: 14, on right: 5 9
scope_exit (34)
    on left: 15, on right: 5 9
Param (35)
    on left: 16, on right: 18 19
ParamList (36)
    on left: 17 18 19, on right: 9 19
ReturnStmt (37)
    on left: 20 21 22, on right: 9
VarDecl (38)
    on left: 23 24, on right: 3 7 27
StmtList (39)
    on left: 25 26 27, on right: 1 5 9 26 27 31
Stmt (40)
    on left: 28 29 30 31, on right: 26
LValue (41)
    on left: 32 33, on right: 28
Expr (42)
    on left: 34 35 36 37 38 39 40, on right: 20 28 29 33 35 39 40 43
    44
FuncCall (43)
    on left: 41, on right: 30 34
ArgList (44)
    on left: 42 43 44, on right: 41 44
BinOp (45)
    on left: 45 46 47 48, on right: 35


state 0

    0 $accept: . Program $end

    TYPE  shift, and go to state 1

    TYPE        [reduce using rule 2 (GlobalDeclList)]
    TYPE        [reduce using rule 6 (GlobalDeclList)]
    WRITE       reduce using rule 2 (GlobalDeclList)
    WRITE       [reduce using rule 6 (GlobalDeclList)]
    OPEN_BRACE  reduce using rule 2 (GlobalDeclList)
    OPEN_BRACE  [reduce using rule 6 (GlobalDeclList)]
    ID          reduce using rule 2 (GlobalDeclList)
    ID          [reduce using rule 6 (GlobalDeclList)]
    VOID        reduce using rule 2 (GlobalDeclList)
    VOID        [reduce using rule 6 (GlobalDeclList)]
    $default    reduce using rule 2 (GlobalDeclList)

    Program         go to state 2
    GlobalDeclList  go to state 3
    VarDecl         go to state 4


state 1

   23 VarDecl: TYPE . ID SEMICOLON
   24        | TYPE . ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

    ID  shift, and go to state 5


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 6


state 3

    1 Program: GlobalDeclList . StmtList MainFunc FuncDeclList

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 7
    OPEN_BRACE  shift, and go to state 8
    ID          shift, and go to state 9

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 10
    StmtList  go to state 11
    Stmt      go to state 12
    LValue    go to state 13
    FuncCall  go to state 14


state 4

    3 GlobalDeclList: VarDecl . GlobalDeclList
    7               | VarDecl . GlobalDeclList

    TYPE  shift, and go to state 1

    TYPE        [reduce using rule 2 (GlobalDeclList)]
    TYPE        [reduce using rule 6 (GlobalDeclList)]
    WRITE       reduce using rule 2 (GlobalDeclList)
    WRITE       [reduce using rule 6 (GlobalDeclList)]
    OPEN_BRACE  reduce using rule 2 (GlobalDeclList)
    OPEN_BRACE  [reduce using rule 6 (GlobalDeclList)]
    ID          reduce using rule 2 (GlobalDeclList)
    ID          [reduce using rule 6 (GlobalDeclList)]
    VOID        reduce using rule 2 (GlobalDeclList)
    VOID        [reduce using rule 6 (GlobalDeclList)]
    $default    reduce using rule 2 (GlobalDeclList)

    GlobalDeclList  go to state 15
    VarDecl         go to state 4


state 5

   23 VarDecl: TYPE ID . SEMICOLON
   24        | TYPE ID . OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

    SEMICOLON     shift, and go to state 16
    OPEN_BRACKET  shift, and go to state 17


state 6

    0 $accept: Program $end .

    $default  accept


state 7

   29 Stmt: WRITE . Expr SEMICOLON

    NUMBER         shift, and go to state 18
    FLOAT_LITERAL  shift, and go to state 19
    OPEN_PAREN     shift, and go to state 20
    ID             shift, and go to state 21

    Expr      go to state 22
    FuncCall  go to state 23


state 8

   31 Stmt: OPEN_BRACE . StmtList CLOSE_BRACE

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 7
    OPEN_BRACE  shift, and go to state 8
    ID          shift, and go to state 9

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 10
    StmtList  go to state 24
    Stmt      go to state 12
    LValue    go to state 13
    FuncCall  go to state 14


state 9

   32 LValue: ID .
   33       | ID . OPEN_BRACKET Expr CLOSE_BRACKET
   41 FuncCall: ID . OPEN_PAREN ArgList CLOSE_PAREN

    OPEN_PAREN    shift, and go to state 25
    OPEN_BRACKET  shift, and go to state 26

    $default  reduce using rule 32 (LValue)


state 10

   27 StmtList: VarDecl . StmtList

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 7
    OPEN_BRACE  shift, and go to state 8
    ID          shift, and go to state 9

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 10
    StmtList  go to state 27
    Stmt      go to state 12
    LValue    go to state 13
    FuncCall  go to state 14


state 11

    1 Program: GlobalDeclList StmtList . MainFunc FuncDeclList

    VOID  shift, and go to state 28

    MainFunc  go to state 29


state 12

   26 StmtList: Stmt . StmtList

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 7
    OPEN_BRACE  shift, and go to state 8
    ID          shift, and go to state 9

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 10
    StmtList  go to state 30
    Stmt      go to state 12
    LValue    go to state 13
    FuncCall  go to state 14


state 13

   28 Stmt: LValue . EQ Expr SEMICOLON

    EQ  shift, and go to state 31


state 14

   30 Stmt: FuncCall . SEMICOLON

    SEMICOLON  shift, and go to state 32


state 15

    3 GlobalDeclList: VarDecl GlobalDeclList .
    7               | VarDecl GlobalDeclList .

    TYPE        reduce using rule 3 (GlobalDeclList)
    TYPE        [reduce using rule 7 (GlobalDeclList)]
    WRITE       reduce using rule 3 (GlobalDeclList)
    WRITE       [reduce using rule 7 (GlobalDeclList)]
    OPEN_BRACE  reduce using rule 3 (GlobalDeclList)
    OPEN_BRACE  [reduce using rule 7 (GlobalDeclList)]
    ID          reduce using rule 3 (GlobalDeclList)
    ID          [reduce using rule 7 (GlobalDeclList)]
    VOID        reduce using rule 3 (GlobalDeclList)
    VOID        [reduce using rule 7 (GlobalDeclList)]
    $default    reduce using rule 3 (GlobalDeclList)


state 16

   23 VarDecl: TYPE ID SEMICOLON .

    $default  reduce using rule 23 (VarDecl)


state 17

   24 VarDecl: TYPE ID OPEN_BRACKET . NUMBER CLOSE_BRACKET SEMICOLON

    NUMBER  shift, and go to state 33


state 18

   36 Expr: NUMBER .

    $default  reduce using rule 36 (Expr)


state 19

   37 Expr: FLOAT_LITERAL .

    $default  reduce using rule 37 (Expr)


state 20

   40 Expr: OPEN_PAREN . Expr CLOSE_PAREN

    NUMBER         shift, and go to state 18
    FLOAT_LITERAL  shift, and go to state 19
    OPEN_PAREN     shift, and go to state 20
    ID             shift, and go to state 21

    Expr      go to state 34
    FuncCall  go to state 23


state 21

   38 Expr: ID .
   39     | ID . OPEN_BRACKET Expr CLOSE_BRACKET
   41 FuncCall: ID . OPEN_PAREN ArgList CLOSE_PAREN

    OPEN_PAREN    shift, and go to state 25
    OPEN_BRACKET  shift, and go to state 35

    $default  reduce using rule 38 (Expr)


state 22

   29 Stmt: WRITE Expr . SEMICOLON
   35 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 36
    PLUS       shift, and go to state 37
    MINUS      shift, and go to state 38
    MULTIPLY   shift, and go to state 39
    DIVIDE     shift, and go to state 40

    BinOp  go to state 41


state 23

   34 Expr: FuncCall .

    $default  reduce using rule 34 (Expr)


state 24

   31 Stmt: OPEN_BRACE StmtList . CLOSE_BRACE

    CLOSE_BRACE  shift, and go to state 42


state 25

   41 FuncCall: ID OPEN_PAREN . ArgList CLOSE_PAREN

    NUMBER         shift, and go to state 18
    FLOAT_LITERAL  shift, and go to state 19
    OPEN_PAREN     shift, and go to state 20
    ID             shift, and go to state 21

    $default  reduce using rule 42 (ArgList)

    Expr      go to state 43
    FuncCall  go to state 23
    ArgList   go to state 44


state 26

   33 LValue: ID OPEN_BRACKET . Expr CLOSE_BRACKET

    NUMBER         shift, and go to state 18
    FLOAT_LITERAL  shift, and go to state 19
    OPEN_PAREN     shift, and go to state 20
    ID             shift, and go to state 21

    Expr      go to state 45
    FuncCall  go to state 23


state 27

   27 StmtList: VarDecl StmtList .

    $default  reduce using rule 27 (StmtList)


state 28

    5 MainFunc: VOID . MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    MAIN  shift, and go to state 46


state 29

    1 Program: GlobalDeclList StmtList MainFunc . FuncDeclList

    TYPE  shift, and go to state 47
    VOID  shift, and go to state 48

    $default  reduce using rule 12 (FuncDeclList)

    FuncDecl      go to state 49
    ReturnType    go to state 50
    FuncDeclList  go to state 51


state 30

   26 StmtList: Stmt StmtList .

    $default  reduce using rule 26 (StmtList)


state 31

   28 Stmt: LValue EQ . Expr SEMICOLON

    NUMBER         shift, and go to state 18
    FLOAT_LITERAL  shift, and go to state 19
    OPEN_PAREN     shift, and go to state 20
    ID             shift, and go to state 21

    Expr      go to state 52
    FuncCall  go to state 23


state 32

   30 Stmt: FuncCall SEMICOLON .

    $default  reduce using rule 30 (Stmt)


state 33

   24 VarDecl: TYPE ID OPEN_BRACKET NUMBER . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET  shift, and go to state 53


state 34

   35 Expr: Expr . BinOp Expr
   40     | OPEN_PAREN Expr . CLOSE_PAREN

    PLUS         shift, and go to state 37
    MINUS        shift, and go to state 38
    MULTIPLY     shift, and go to state 39
    DIVIDE       shift, and go to state 40
    CLOSE_PAREN  shift, and go to state 54

    BinOp  go to state 41


state 35

   39 Expr: ID OPEN_BRACKET . Expr CLOSE_BRACKET

    NUMBER         shift, and go to state 18
    FLOAT_LITERAL  shift, and go to state 19
    OPEN_PAREN     shift, and go to state 20
    ID             shift, and go to state 21

    Expr      go to state 55
    FuncCall  go to state 23


state 36

   29 Stmt: WRITE Expr SEMICOLON .

    $default  reduce using rule 29 (Stmt)


state 37

   45 BinOp: PLUS .

    $default  reduce using rule 45 (BinOp)


state 38

   46 BinOp: MINUS .

    $default  reduce using rule 46 (BinOp)


state 39

   47 BinOp: MULTIPLY .

    $default  reduce using rule 47 (BinOp)


state 40

   48 BinOp: DIVIDE .

    $default  reduce using rule 48 (BinOp)


state 41

   35 Expr: Expr BinOp . Expr

    NUMBER         shift, and go to state 18
    FLOAT_LITERAL  shift, and go to state 19
    OPEN_PAREN     shift, and go to state 20
    ID             shift, and go to state 21

    Expr      go to state 56
    FuncCall  go to state 23


state 42

   31 Stmt: OPEN_BRACE StmtList CLOSE_BRACE .

    $default  reduce using rule 31 (Stmt)


state 43

   35 Expr: Expr . BinOp Expr
   43 ArgList: Expr .
   44        | Expr . COMMA ArgList

    PLUS      shift, and go to state 37
    MINUS     shift, and go to state 38
    MULTIPLY  shift, and go to state 39
    DIVIDE    shift, and go to state 40
    COMMA     shift, and go to state 57

    $default  reduce using rule 43 (ArgList)

    BinOp  go to state 41


state 44

   41 FuncCall: ID OPEN_PAREN ArgList . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 58


state 45

   33 LValue: ID OPEN_BRACKET Expr . CLOSE_BRACKET
   35 Expr: Expr . BinOp Expr

    PLUS           shift, and go to state 37
    MINUS          shift, and go to state 38
    MULTIPLY       shift, and go to state 39
    DIVIDE         shift, and go to state 40
    CLOSE_BRACKET  shift, and go to state 59

    BinOp  go to state 41


state 46

    5 MainFunc: VOID MAIN . OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    OPEN_PAREN  shift, and go to state 60


state 47

   11 ReturnType: TYPE .

    $default  reduce using rule 11 (ReturnType)


state 48

   10 ReturnType: VOID .

    $default  reduce using rule 10 (ReturnType)


state 49

   13 FuncDeclList: FuncDecl . FuncDeclList

    TYPE  shift, and go to state 47
    VOID  shift, and go to state 48

    $default  reduce using rule 12 (FuncDeclList)

    FuncDecl      go to state 49
    ReturnType    go to state 50
    FuncDeclList  go to state 61


state 50

    9 FuncDecl: ReturnType . SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    ID  shift, and go to state 62

    SetFunctionName  go to state 63


state 51

    1 Program: GlobalDeclList StmtList MainFunc FuncDeclList .

    $default  reduce using rule 1 (Program)


state 52

   28 Stmt: LValue EQ Expr . SEMICOLON
   35 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 64
    PLUS       shift, and go to state 37
    MINUS      shift, and go to state 38
    MULTIPLY   shift, and go to state 39
    DIVIDE     shift, and go to state 40

    BinOp  go to state 41


state 53

   24 VarDecl: TYPE ID OPEN_BRACKET NUMBER CLOSE_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 65


state 54

   40 Expr: OPEN_PAREN Expr CLOSE_PAREN .

    $default  reduce using rule 40 (Expr)


state 55

   35 Expr: Expr . BinOp Expr
   39     | ID OPEN_BRACKET Expr . CLOSE_BRACKET

    PLUS           shift, and go to state 37
    MINUS          shift, and go to state 38
    MULTIPLY       shift, and go to state 39
    DIVIDE         shift, and go to state 40
    CLOSE_BRACKET  shift, and go to state 66

    BinOp  go to state 41


state 56

   35 Expr: Expr . BinOp Expr
   35     | Expr BinOp Expr .

    PLUS      shift, and go to state 37
    MINUS     shift, and go to state 38
    MULTIPLY  shift, and go to state 39
    DIVIDE    shift, and go to state 40

    PLUS      [reduce using rule 35 (Expr)]
    MINUS     [reduce using rule 35 (Expr)]
    MULTIPLY  [reduce using rule 35 (Expr)]
    DIVIDE    [reduce using rule 35 (Expr)]
    $default  reduce using rule 35 (Expr)

    BinOp  go to state 41


state 57

   44 ArgList: Expr COMMA . ArgList

    NUMBER         shift, and go to state 18
    FLOAT_LITERAL  shift, and go to state 19
    OPEN_PAREN     shift, and go to state 20
    ID             shift, and go to state 21

    $default  reduce using rule 42 (ArgList)

    Expr      go to state 43
    FuncCall  go to state 23
    ArgList   go to state 67


state 58

   41 FuncCall: ID OPEN_PAREN ArgList CLOSE_PAREN .

    $default  reduce using rule 41 (FuncCall)


state 59

   33 LValue: ID OPEN_BRACKET Expr CLOSE_BRACKET .

    $default  reduce using rule 33 (LValue)


state 60

    5 MainFunc: VOID MAIN OPEN_PAREN . CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    CLOSE_PAREN  shift, and go to state 68


state 61

   13 FuncDeclList: FuncDecl FuncDeclList .

    $default  reduce using rule 13 (FuncDeclList)


state 62

    8 SetFunctionName: ID .

    $default  reduce using rule 8 (SetFunctionName)


state 63

    9 FuncDecl: ReturnType SetFunctionName . OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    OPEN_PAREN  shift, and go to state 69


state 64

   28 Stmt: LValue EQ Expr SEMICOLON .

    $default  reduce using rule 28 (Stmt)


state 65

   24 VarDecl: TYPE ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON .

    $default  reduce using rule 24 (VarDecl)


state 66

   39 Expr: ID OPEN_BRACKET Expr CLOSE_BRACKET .

    $default  reduce using rule 39 (Expr)


state 67

   44 ArgList: Expr COMMA ArgList .

    $default  reduce using rule 44 (ArgList)


state 68

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN . @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    $default  reduce using rule 4 (@1)

    @1  go to state 70


state 69

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN . scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    $default  reduce using rule 14 (scope_enter)

    scope_enter  go to state 71


state 70

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 . scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    $default  reduce using rule 14 (scope_enter)

    scope_enter  go to state 72


state 71

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter . ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    TYPE  shift, and go to state 73

    $default  reduce using rule 17 (ParamList)

    Param      go to state 74
    ParamList  go to state 75


state 72

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter . OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    OPEN_BRACE  shift, and go to state 76


state 73

   16 Param: TYPE . ID

    ID  shift, and go to state 77


state 74

   18 ParamList: Param .
   19          | Param . COMMA ParamList

    COMMA  shift, and go to state 78

    $default  reduce using rule 18 (ParamList)


state 75

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList . CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    CLOSE_PAREN  shift, and go to state 79


state 76

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE . StmtList CLOSE_BRACE scope_exit

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 7
    OPEN_BRACE  shift, and go to state 8
    ID          shift, and go to state 9

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 10
    StmtList  go to state 80
    Stmt      go to state 12
    LValue    go to state 13
    FuncCall  go to state 14


state 77

   16 Param: TYPE ID .

    $default  reduce using rule 16 (Param)


state 78

   19 ParamList: Param COMMA . ParamList

    TYPE  shift, and go to state 73

    $default  reduce using rule 17 (ParamList)

    Param      go to state 74
    ParamList  go to state 81


state 79

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN . OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    OPEN_BRACE  shift, and go to state 82


state 80

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList . CLOSE_BRACE scope_exit

    CLOSE_BRACE  shift, and go to state 83


state 81

   19 ParamList: Param COMMA ParamList .

    $default  reduce using rule 19 (ParamList)


state 82

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE . StmtList ReturnStmt CLOSE_BRACE scope_exit

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 7
    OPEN_BRACE  shift, and go to state 8
    ID          shift, and go to state 9

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 10
    StmtList  go to state 84
    Stmt      go to state 12
    LValue    go to state 13
    FuncCall  go to state 14


state 83

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE . scope_exit

    $default  reduce using rule 15 (scope_exit)

    scope_exit  go to state 85


state 84

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList . ReturnStmt CLOSE_BRACE scope_exit

    RETURN  shift, and go to state 86

    $default  reduce using rule 22 (ReturnStmt)

    ReturnStmt  go to state 87


state 85

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN @1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit .

    $default  reduce using rule 5 (MainFunc)


state 86

   20 ReturnStmt: RETURN . Expr SEMICOLON
   21           | RETURN . SEMICOLON

    NUMBER         shift, and go to state 18
    FLOAT_LITERAL  shift, and go to state 19
    SEMICOLON      shift, and go to state 88
    OPEN_PAREN     shift, and go to state 20
    ID             shift, and go to state 21

    Expr      go to state 89
    FuncCall  go to state 23


state 87

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt . CLOSE_BRACE scope_exit

    CLOSE_BRACE  shift, and go to state 90


state 88

   21 ReturnStmt: RETURN SEMICOLON .

    $default  reduce using rule 21 (ReturnStmt)


state 89

   20 ReturnStmt: RETURN Expr . SEMICOLON
   35 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 91
    PLUS       shift, and go to state 37
    MINUS      shift, and go to state 38
    MULTIPLY   shift, and go to state 39
    DIVIDE     shift, and go to state 40

    BinOp  go to state 41


state 90

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE . scope_exit

    $default  reduce using rule 15 (scope_exit)

    scope_exit  go to state 92


state 91

   20 ReturnStmt: RETURN Expr SEMICOLON .

    $default  reduce using rule 20 (ReturnStmt)


state 92

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit .

    $default  reduce using rule 9 (FuncDecl)
