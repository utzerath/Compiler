Nonterminals useless in grammar

    VarDeclList


Terminals unused in grammar

    "&&"
    "||"
    "!"


Rules useless in grammar

   65 VarDeclList: %empty
   66            | VarDecl VarDeclList


Rules useless in parser due to conflicts

    6 GlobalDeclList: %empty
    7               | VarDecl GlobalDeclList


State 0 conflicts: 2 shift/reduce, 8 reduce/reduce
State 5 conflicts: 2 shift/reduce, 8 reduce/reduce
State 19 conflicts: 8 reduce/reduce
State 83 conflicts: 12 shift/reduce
State 98 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: GlobalDeclList StmtList MainFunc FuncDeclList

    2 GlobalDeclList: %empty
    3               | VarDecl GlobalDeclList

    4 $@1: %empty

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN $@1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    6 GlobalDeclList: %empty
    7               | VarDecl GlobalDeclList

    8 SetFunctionName: ID

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

   10 ReturnType: VOID
   11           | TYPE

   12 FuncDeclList: %empty
   13             | FuncDecl FuncDeclList

   14 scope_enter: %empty

   15 scope_exit: %empty

   16 Param: TYPE ID

   17 ParamList: %empty
   18          | Param
   19          | Param COMMA ParamList

   20 ReturnStmt: RETURN Expr SEMICOLON
   21           | RETURN SEMICOLON
   22           | %empty

   23 VarDecl: Type ID SEMICOLON
   24        | Type ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

   25 StmtList: %empty
   26         | Stmt StmtList
   27         | VarDecl StmtList

   28 Stmt: LValue EQ Expr SEMICOLON
   29     | WRITE Expr SEMICOLON
   30     | FuncCall SEMICOLON
   31     | OPEN_BRACE StmtList CLOSE_BRACE
   32     | IfStmt
   33     | WHILE OPEN_PAREN Expr CLOSE_PAREN Stmt

   34 Type: TYPE
   35     | TYPE_BOOL

   36 IfStmt: IF OPEN_PAREN Expr CLOSE_PAREN Stmt
   37       | IF OPEN_PAREN Expr CLOSE_PAREN Stmt ELSE Stmt

   38 LValue: ID
   39       | ID OPEN_BRACKET Expr CLOSE_BRACKET

   40 Expr: FuncCall
   41     | Expr BinOp Expr
   42     | Expr AND Expr
   43     | Expr OR Expr
   44     | NOT Expr
   45     | Expr EQUALS Expr
   46     | Expr NOT_EQUALS Expr
   47     | Expr LESS_THAN Expr
   48     | Expr GREATER_THAN Expr
   49     | Expr LESS_EQUAL Expr
   50     | Expr GREATER_EQUAL Expr
   51     | BOOL_LITERAL
   52     | NUMBER
   53     | FLOAT_LITERAL
   54     | ID
   55     | ID OPEN_BRACKET Expr CLOSE_BRACKET
   56     | OPEN_PAREN Expr CLOSE_PAREN

   57 FuncCall: ID OPEN_PAREN ArgList CLOSE_PAREN

   58 ArgList: %empty
   59        | Expr
   60        | Expr COMMA ArgList

   61 BinOp: PLUS
   62      | MINUS
   63      | MULTIPLY
   64      | DIVIDE


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <string> (258) 11 16 34
    NUMBER <number> (259) 24 52
    FLOAT_LITERAL <float_number> (260) 53
    SEMICOLON <char> (261) 20 21 23 24 28 29 30
    EQ <operator> (262) 28
    PLUS <operator> (263) 61
    MINUS <operator> (264) 62
    MULTIPLY <operator> (265) 63
    DIVIDE <operator> (266) 64
    WRITE <string> (267) 29
    OPEN_BRACE <char> (268) 5 9 31
    CLOSE_BRACE <char> (269) 5 9 31
    OPEN_PAREN <char> (270) 5 9 33 36 37 56 57
    CLOSE_PAREN <char> (271) 5 9 33 36 37 56 57
    ID <string> (272) 8 16 23 24 38 39 54 55 57
    OPEN_BRACKET <char> (273) 24 39 55
    CLOSE_BRACKET <char> (274) 24 39 55
    RETURN <string> (275) 20 21
    VOID <string> (276) 5 10
    COMMA (277) 19 60
    MAIN (278) 5
    WHILE (279) 33
    BOOL_LITERAL <number> (280) 51
    TYPE_BOOL (281) 35
    "&&" (282)
    "||" (283)
    "!" (284)
    IF (285) 36 37
    ELSE (286) 37
    AND (287) 42
    OR (288) 43
    NOT (289) 44
    EQUALS (290) 45
    NOT_EQUALS (291) 46
    LESS_THAN (292) 47
    GREATER_THAN (293) 48
    LESS_EQUAL (294) 49
    GREATER_EQUAL (295) 50


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    Program <ast> (42)
        on left: 1
        on right: 0
    GlobalDeclList <ast> (43)
        on left: 2 3 6 7
        on right: 1 3 7
    MainFunc <ast> (44)
        on left: 5
        on right: 1
    $@1 (45)
        on left: 4
        on right: 5
    SetFunctionName <ast> (46)
        on left: 8
        on right: 9
    FuncDecl <ast> (47)
        on left: 9
        on right: 13
    ReturnType <string> (48)
        on left: 10 11
        on right: 9
    FuncDeclList <ast> (49)
        on left: 12 13
        on right: 1 13
    scope_enter <ast> (50)
        on left: 14
        on right: 5 9
    scope_exit <ast> (51)
        on left: 15
        on right: 5 9
    Param <ast> (52)
        on left: 16
        on right: 18 19
    ParamList <ast> (53)
        on left: 17 18 19
        on right: 9 19
    ReturnStmt <ast> (54)
        on left: 20 21 22
        on right: 9
    VarDecl <ast> (55)
        on left: 23 24
        on right: 3 7 27
    StmtList <ast> (56)
        on left: 25 26 27
        on right: 1 5 9 26 27 31
    Stmt <ast> (57)
        on left: 28 29 30 31 32 33
        on right: 26 33 36 37
    Type <string> (58)
        on left: 34 35
        on right: 23 24
    IfStmt <ast> (59)
        on left: 36 37
        on right: 32
    LValue <ast> (60)
        on left: 38 39
        on right: 28
    Expr <ast> (61)
        on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56
        on right: 20 28 29 33 36 37 39 41 42 43 44 45 46 47 48 49 50 55 56 59 60
    FuncCall <ast> (62)
        on left: 57
        on right: 30 40
    ArgList <ast> (63)
        on left: 58 59 60
        on right: 57 60
    BinOp <character> (64)
        on left: 61 62 63 64
        on right: 41


State 0

    0 $accept: . Program $end

    TYPE       shift, and go to state 1
    TYPE_BOOL  shift, and go to state 2

    TYPE        [reduce using rule 2 (GlobalDeclList)]
    TYPE        [reduce using rule 6 (GlobalDeclList)]
    WRITE       reduce using rule 2 (GlobalDeclList)
    WRITE       [reduce using rule 6 (GlobalDeclList)]
    OPEN_BRACE  reduce using rule 2 (GlobalDeclList)
    OPEN_BRACE  [reduce using rule 6 (GlobalDeclList)]
    ID          reduce using rule 2 (GlobalDeclList)
    ID          [reduce using rule 6 (GlobalDeclList)]
    VOID        reduce using rule 2 (GlobalDeclList)
    VOID        [reduce using rule 6 (GlobalDeclList)]
    WHILE       reduce using rule 2 (GlobalDeclList)
    WHILE       [reduce using rule 6 (GlobalDeclList)]
    TYPE_BOOL   [reduce using rule 2 (GlobalDeclList)]
    TYPE_BOOL   [reduce using rule 6 (GlobalDeclList)]
    IF          reduce using rule 2 (GlobalDeclList)
    IF          [reduce using rule 6 (GlobalDeclList)]
    $default    reduce using rule 2 (GlobalDeclList)

    Program         go to state 3
    GlobalDeclList  go to state 4
    VarDecl         go to state 5
    Type            go to state 6


State 1

   34 Type: TYPE .

    $default  reduce using rule 34 (Type)


State 2

   35 Type: TYPE_BOOL .

    $default  reduce using rule 35 (Type)


State 3

    0 $accept: Program . $end

    $end  shift, and go to state 7


State 4

    1 Program: GlobalDeclList . StmtList MainFunc FuncDeclList

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    WHILE       shift, and go to state 11
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 12

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 13
    StmtList  go to state 14
    Stmt      go to state 15
    Type      go to state 6
    IfStmt    go to state 16
    LValue    go to state 17
    FuncCall  go to state 18


State 5

    3 GlobalDeclList: VarDecl . GlobalDeclList
    7               | VarDecl . GlobalDeclList

    TYPE       shift, and go to state 1
    TYPE_BOOL  shift, and go to state 2

    TYPE        [reduce using rule 2 (GlobalDeclList)]
    TYPE        [reduce using rule 6 (GlobalDeclList)]
    WRITE       reduce using rule 2 (GlobalDeclList)
    WRITE       [reduce using rule 6 (GlobalDeclList)]
    OPEN_BRACE  reduce using rule 2 (GlobalDeclList)
    OPEN_BRACE  [reduce using rule 6 (GlobalDeclList)]
    ID          reduce using rule 2 (GlobalDeclList)
    ID          [reduce using rule 6 (GlobalDeclList)]
    VOID        reduce using rule 2 (GlobalDeclList)
    VOID        [reduce using rule 6 (GlobalDeclList)]
    WHILE       reduce using rule 2 (GlobalDeclList)
    WHILE       [reduce using rule 6 (GlobalDeclList)]
    TYPE_BOOL   [reduce using rule 2 (GlobalDeclList)]
    TYPE_BOOL   [reduce using rule 6 (GlobalDeclList)]
    IF          reduce using rule 2 (GlobalDeclList)
    IF          [reduce using rule 6 (GlobalDeclList)]
    $default    reduce using rule 2 (GlobalDeclList)

    GlobalDeclList  go to state 19
    VarDecl         go to state 5
    Type            go to state 6


State 6

   23 VarDecl: Type . ID SEMICOLON
   24        | Type . ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

    ID  shift, and go to state 20


State 7

    0 $accept: Program $end .

    $default  accept


State 8

   29 Stmt: WRITE . Expr SEMICOLON

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 27
    FuncCall  go to state 28


State 9

   31 Stmt: OPEN_BRACE . StmtList CLOSE_BRACE

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    WHILE       shift, and go to state 11
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 12

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 13
    StmtList  go to state 29
    Stmt      go to state 15
    Type      go to state 6
    IfStmt    go to state 16
    LValue    go to state 17
    FuncCall  go to state 18


State 10

   38 LValue: ID .
   39       | ID . OPEN_BRACKET Expr CLOSE_BRACKET
   57 FuncCall: ID . OPEN_PAREN ArgList CLOSE_PAREN

    OPEN_PAREN    shift, and go to state 30
    OPEN_BRACKET  shift, and go to state 31

    $default  reduce using rule 38 (LValue)


State 11

   33 Stmt: WHILE . OPEN_PAREN Expr CLOSE_PAREN Stmt

    OPEN_PAREN  shift, and go to state 32


State 12

   36 IfStmt: IF . OPEN_PAREN Expr CLOSE_PAREN Stmt
   37       | IF . OPEN_PAREN Expr CLOSE_PAREN Stmt ELSE Stmt

    OPEN_PAREN  shift, and go to state 33


State 13

   27 StmtList: VarDecl . StmtList

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    WHILE       shift, and go to state 11
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 12

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 13
    StmtList  go to state 34
    Stmt      go to state 15
    Type      go to state 6
    IfStmt    go to state 16
    LValue    go to state 17
    FuncCall  go to state 18


State 14

    1 Program: GlobalDeclList StmtList . MainFunc FuncDeclList

    VOID  shift, and go to state 35

    MainFunc  go to state 36


State 15

   26 StmtList: Stmt . StmtList

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    WHILE       shift, and go to state 11
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 12

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 13
    StmtList  go to state 37
    Stmt      go to state 15
    Type      go to state 6
    IfStmt    go to state 16
    LValue    go to state 17
    FuncCall  go to state 18


State 16

   32 Stmt: IfStmt .

    $default  reduce using rule 32 (Stmt)


State 17

   28 Stmt: LValue . EQ Expr SEMICOLON

    EQ  shift, and go to state 38


State 18

   30 Stmt: FuncCall . SEMICOLON

    SEMICOLON  shift, and go to state 39


State 19

    3 GlobalDeclList: VarDecl GlobalDeclList .
    7               | VarDecl GlobalDeclList .

    TYPE        reduce using rule 3 (GlobalDeclList)
    TYPE        [reduce using rule 7 (GlobalDeclList)]
    WRITE       reduce using rule 3 (GlobalDeclList)
    WRITE       [reduce using rule 7 (GlobalDeclList)]
    OPEN_BRACE  reduce using rule 3 (GlobalDeclList)
    OPEN_BRACE  [reduce using rule 7 (GlobalDeclList)]
    ID          reduce using rule 3 (GlobalDeclList)
    ID          [reduce using rule 7 (GlobalDeclList)]
    VOID        reduce using rule 3 (GlobalDeclList)
    VOID        [reduce using rule 7 (GlobalDeclList)]
    WHILE       reduce using rule 3 (GlobalDeclList)
    WHILE       [reduce using rule 7 (GlobalDeclList)]
    TYPE_BOOL   reduce using rule 3 (GlobalDeclList)
    TYPE_BOOL   [reduce using rule 7 (GlobalDeclList)]
    IF          reduce using rule 3 (GlobalDeclList)
    IF          [reduce using rule 7 (GlobalDeclList)]
    $default    reduce using rule 3 (GlobalDeclList)


State 20

   23 VarDecl: Type ID . SEMICOLON
   24        | Type ID . OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

    SEMICOLON     shift, and go to state 40
    OPEN_BRACKET  shift, and go to state 41


State 21

   52 Expr: NUMBER .

    $default  reduce using rule 52 (Expr)


State 22

   53 Expr: FLOAT_LITERAL .

    $default  reduce using rule 53 (Expr)


State 23

   56 Expr: OPEN_PAREN . Expr CLOSE_PAREN

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 42
    FuncCall  go to state 28


State 24

   54 Expr: ID .
   55     | ID . OPEN_BRACKET Expr CLOSE_BRACKET
   57 FuncCall: ID . OPEN_PAREN ArgList CLOSE_PAREN

    OPEN_PAREN    shift, and go to state 30
    OPEN_BRACKET  shift, and go to state 43

    $default  reduce using rule 54 (Expr)


State 25

   51 Expr: BOOL_LITERAL .

    $default  reduce using rule 51 (Expr)


State 26

   44 Expr: NOT . Expr

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 44
    FuncCall  go to state 28


State 27

   29 Stmt: WRITE Expr . SEMICOLON
   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    SEMICOLON      shift, and go to state 45
    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    AND            shift, and go to state 50
    OR             shift, and go to state 51
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    BinOp  go to state 58


State 28

   40 Expr: FuncCall .

    $default  reduce using rule 40 (Expr)


State 29

   31 Stmt: OPEN_BRACE StmtList . CLOSE_BRACE

    CLOSE_BRACE  shift, and go to state 59


State 30

   57 FuncCall: ID OPEN_PAREN . ArgList CLOSE_PAREN

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    $default  reduce using rule 58 (ArgList)

    Expr      go to state 60
    FuncCall  go to state 28
    ArgList   go to state 61


State 31

   39 LValue: ID OPEN_BRACKET . Expr CLOSE_BRACKET

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 62
    FuncCall  go to state 28


State 32

   33 Stmt: WHILE OPEN_PAREN . Expr CLOSE_PAREN Stmt

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 63
    FuncCall  go to state 28


State 33

   36 IfStmt: IF OPEN_PAREN . Expr CLOSE_PAREN Stmt
   37       | IF OPEN_PAREN . Expr CLOSE_PAREN Stmt ELSE Stmt

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 64
    FuncCall  go to state 28


State 34

   27 StmtList: VarDecl StmtList .

    $default  reduce using rule 27 (StmtList)


State 35

    5 MainFunc: VOID . MAIN OPEN_PAREN CLOSE_PAREN $@1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    MAIN  shift, and go to state 65


State 36

    1 Program: GlobalDeclList StmtList MainFunc . FuncDeclList

    TYPE  shift, and go to state 66
    VOID  shift, and go to state 67

    $default  reduce using rule 12 (FuncDeclList)

    FuncDecl      go to state 68
    ReturnType    go to state 69
    FuncDeclList  go to state 70


State 37

   26 StmtList: Stmt StmtList .

    $default  reduce using rule 26 (StmtList)


State 38

   28 Stmt: LValue EQ . Expr SEMICOLON

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 71
    FuncCall  go to state 28


State 39

   30 Stmt: FuncCall SEMICOLON .

    $default  reduce using rule 30 (Stmt)


State 40

   23 VarDecl: Type ID SEMICOLON .

    $default  reduce using rule 23 (VarDecl)


State 41

   24 VarDecl: Type ID OPEN_BRACKET . NUMBER CLOSE_BRACKET SEMICOLON

    NUMBER  shift, and go to state 72


State 42

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr
   56     | OPEN_PAREN Expr . CLOSE_PAREN

    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    CLOSE_PAREN    shift, and go to state 73
    AND            shift, and go to state 50
    OR             shift, and go to state 51
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    BinOp  go to state 58


State 43

   55 Expr: ID OPEN_BRACKET . Expr CLOSE_BRACKET

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 74
    FuncCall  go to state 28


State 44

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   44     | NOT Expr .
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    $default  reduce using rule 44 (Expr)

    BinOp  go to state 58


State 45

   29 Stmt: WRITE Expr SEMICOLON .

    $default  reduce using rule 29 (Stmt)


State 46

   61 BinOp: PLUS .

    $default  reduce using rule 61 (BinOp)


State 47

   62 BinOp: MINUS .

    $default  reduce using rule 62 (BinOp)


State 48

   63 BinOp: MULTIPLY .

    $default  reduce using rule 63 (BinOp)


State 49

   64 BinOp: DIVIDE .

    $default  reduce using rule 64 (BinOp)


State 50

   42 Expr: Expr AND . Expr

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 75
    FuncCall  go to state 28


State 51

   43 Expr: Expr OR . Expr

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 76
    FuncCall  go to state 28


State 52

   45 Expr: Expr EQUALS . Expr

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 77
    FuncCall  go to state 28


State 53

   46 Expr: Expr NOT_EQUALS . Expr

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 78
    FuncCall  go to state 28


State 54

   47 Expr: Expr LESS_THAN . Expr

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 79
    FuncCall  go to state 28


State 55

   48 Expr: Expr GREATER_THAN . Expr

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 80
    FuncCall  go to state 28


State 56

   49 Expr: Expr LESS_EQUAL . Expr

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 81
    FuncCall  go to state 28


State 57

   50 Expr: Expr GREATER_EQUAL . Expr

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 82
    FuncCall  go to state 28


State 58

   41 Expr: Expr BinOp . Expr

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 83
    FuncCall  go to state 28


State 59

   31 Stmt: OPEN_BRACE StmtList CLOSE_BRACE .

    $default  reduce using rule 31 (Stmt)


State 60

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr
   59 ArgList: Expr .
   60        | Expr . COMMA ArgList

    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    COMMA          shift, and go to state 84
    AND            shift, and go to state 50
    OR             shift, and go to state 51
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    $default  reduce using rule 59 (ArgList)

    BinOp  go to state 58


State 61

   57 FuncCall: ID OPEN_PAREN ArgList . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 85


State 62

   39 LValue: ID OPEN_BRACKET Expr . CLOSE_BRACKET
   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    CLOSE_BRACKET  shift, and go to state 86
    AND            shift, and go to state 50
    OR             shift, and go to state 51
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    BinOp  go to state 58


State 63

   33 Stmt: WHILE OPEN_PAREN Expr . CLOSE_PAREN Stmt
   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    CLOSE_PAREN    shift, and go to state 87
    AND            shift, and go to state 50
    OR             shift, and go to state 51
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    BinOp  go to state 58


State 64

   36 IfStmt: IF OPEN_PAREN Expr . CLOSE_PAREN Stmt
   37       | IF OPEN_PAREN Expr . CLOSE_PAREN Stmt ELSE Stmt
   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    CLOSE_PAREN    shift, and go to state 88
    AND            shift, and go to state 50
    OR             shift, and go to state 51
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    BinOp  go to state 58


State 65

    5 MainFunc: VOID MAIN . OPEN_PAREN CLOSE_PAREN $@1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    OPEN_PAREN  shift, and go to state 89


State 66

   11 ReturnType: TYPE .

    $default  reduce using rule 11 (ReturnType)


State 67

   10 ReturnType: VOID .

    $default  reduce using rule 10 (ReturnType)


State 68

   13 FuncDeclList: FuncDecl . FuncDeclList

    TYPE  shift, and go to state 66
    VOID  shift, and go to state 67

    $default  reduce using rule 12 (FuncDeclList)

    FuncDecl      go to state 68
    ReturnType    go to state 69
    FuncDeclList  go to state 90


State 69

    9 FuncDecl: ReturnType . SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    ID  shift, and go to state 91

    SetFunctionName  go to state 92


State 70

    1 Program: GlobalDeclList StmtList MainFunc FuncDeclList .

    $default  reduce using rule 1 (Program)


State 71

   28 Stmt: LValue EQ Expr . SEMICOLON
   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    SEMICOLON      shift, and go to state 93
    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    AND            shift, and go to state 50
    OR             shift, and go to state 51
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    BinOp  go to state 58


State 72

   24 VarDecl: Type ID OPEN_BRACKET NUMBER . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET  shift, and go to state 94


State 73

   56 Expr: OPEN_PAREN Expr CLOSE_PAREN .

    $default  reduce using rule 56 (Expr)


State 74

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr
   55     | ID OPEN_BRACKET Expr . CLOSE_BRACKET

    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    CLOSE_BRACKET  shift, and go to state 95
    AND            shift, and go to state 50
    OR             shift, and go to state 51
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    BinOp  go to state 58


State 75

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   42     | Expr AND Expr .
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    $default  reduce using rule 42 (Expr)

    BinOp  go to state 58


State 76

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   43     | Expr OR Expr .
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    AND            shift, and go to state 50
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    $default  reduce using rule 43 (Expr)

    BinOp  go to state 58


State 77

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   45     | Expr EQUALS Expr .
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    PLUS      shift, and go to state 46
    MINUS     shift, and go to state 47
    MULTIPLY  shift, and go to state 48
    DIVIDE    shift, and go to state 49

    $default  reduce using rule 45 (Expr)

    BinOp  go to state 58


State 78

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   46     | Expr NOT_EQUALS Expr .
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    PLUS      shift, and go to state 46
    MINUS     shift, and go to state 47
    MULTIPLY  shift, and go to state 48
    DIVIDE    shift, and go to state 49

    $default  reduce using rule 46 (Expr)

    BinOp  go to state 58


State 79

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   47     | Expr LESS_THAN Expr .
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    PLUS      shift, and go to state 46
    MINUS     shift, and go to state 47
    MULTIPLY  shift, and go to state 48
    DIVIDE    shift, and go to state 49

    $default  reduce using rule 47 (Expr)

    BinOp  go to state 58


State 80

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   48     | Expr GREATER_THAN Expr .
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    PLUS      shift, and go to state 46
    MINUS     shift, and go to state 47
    MULTIPLY  shift, and go to state 48
    DIVIDE    shift, and go to state 49

    $default  reduce using rule 48 (Expr)

    BinOp  go to state 58


State 81

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   49     | Expr LESS_EQUAL Expr .
   50     | Expr . GREATER_EQUAL Expr

    PLUS      shift, and go to state 46
    MINUS     shift, and go to state 47
    MULTIPLY  shift, and go to state 48
    DIVIDE    shift, and go to state 49

    $default  reduce using rule 49 (Expr)

    BinOp  go to state 58


State 82

   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr
   50     | Expr GREATER_EQUAL Expr .

    PLUS      shift, and go to state 46
    MINUS     shift, and go to state 47
    MULTIPLY  shift, and go to state 48
    DIVIDE    shift, and go to state 49

    $default  reduce using rule 50 (Expr)

    BinOp  go to state 58


State 83

   41 Expr: Expr . BinOp Expr
   41     | Expr BinOp Expr .
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    AND            shift, and go to state 50
    OR             shift, and go to state 51
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    PLUS           [reduce using rule 41 (Expr)]
    MINUS          [reduce using rule 41 (Expr)]
    MULTIPLY       [reduce using rule 41 (Expr)]
    DIVIDE         [reduce using rule 41 (Expr)]
    AND            [reduce using rule 41 (Expr)]
    OR             [reduce using rule 41 (Expr)]
    EQUALS         [reduce using rule 41 (Expr)]
    NOT_EQUALS     [reduce using rule 41 (Expr)]
    LESS_THAN      [reduce using rule 41 (Expr)]
    GREATER_THAN   [reduce using rule 41 (Expr)]
    LESS_EQUAL     [reduce using rule 41 (Expr)]
    GREATER_EQUAL  [reduce using rule 41 (Expr)]
    $default       reduce using rule 41 (Expr)

    BinOp  go to state 58


State 84

   60 ArgList: Expr COMMA . ArgList

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    $default  reduce using rule 58 (ArgList)

    Expr      go to state 60
    FuncCall  go to state 28
    ArgList   go to state 96


State 85

   57 FuncCall: ID OPEN_PAREN ArgList CLOSE_PAREN .

    $default  reduce using rule 57 (FuncCall)


State 86

   39 LValue: ID OPEN_BRACKET Expr CLOSE_BRACKET .

    $default  reduce using rule 39 (LValue)


State 87

   33 Stmt: WHILE OPEN_PAREN Expr CLOSE_PAREN . Stmt

    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    WHILE       shift, and go to state 11
    IF          shift, and go to state 12

    Stmt      go to state 97
    IfStmt    go to state 16
    LValue    go to state 17
    FuncCall  go to state 18


State 88

   36 IfStmt: IF OPEN_PAREN Expr CLOSE_PAREN . Stmt
   37       | IF OPEN_PAREN Expr CLOSE_PAREN . Stmt ELSE Stmt

    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    WHILE       shift, and go to state 11
    IF          shift, and go to state 12

    Stmt      go to state 98
    IfStmt    go to state 16
    LValue    go to state 17
    FuncCall  go to state 18


State 89

    5 MainFunc: VOID MAIN OPEN_PAREN . CLOSE_PAREN $@1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    CLOSE_PAREN  shift, and go to state 99


State 90

   13 FuncDeclList: FuncDecl FuncDeclList .

    $default  reduce using rule 13 (FuncDeclList)


State 91

    8 SetFunctionName: ID .

    $default  reduce using rule 8 (SetFunctionName)


State 92

    9 FuncDecl: ReturnType SetFunctionName . OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    OPEN_PAREN  shift, and go to state 100


State 93

   28 Stmt: LValue EQ Expr SEMICOLON .

    $default  reduce using rule 28 (Stmt)


State 94

   24 VarDecl: Type ID OPEN_BRACKET NUMBER CLOSE_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 101


State 95

   55 Expr: ID OPEN_BRACKET Expr CLOSE_BRACKET .

    $default  reduce using rule 55 (Expr)


State 96

   60 ArgList: Expr COMMA ArgList .

    $default  reduce using rule 60 (ArgList)


State 97

   33 Stmt: WHILE OPEN_PAREN Expr CLOSE_PAREN Stmt .

    $default  reduce using rule 33 (Stmt)


State 98

   36 IfStmt: IF OPEN_PAREN Expr CLOSE_PAREN Stmt .
   37       | IF OPEN_PAREN Expr CLOSE_PAREN Stmt . ELSE Stmt

    ELSE  shift, and go to state 102

    ELSE      [reduce using rule 36 (IfStmt)]
    $default  reduce using rule 36 (IfStmt)


State 99

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN . $@1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    $default  reduce using rule 4 ($@1)

    $@1  go to state 103


State 100

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN . scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    $default  reduce using rule 14 (scope_enter)

    scope_enter  go to state 104


State 101

   24 VarDecl: Type ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON .

    $default  reduce using rule 24 (VarDecl)


State 102

   37 IfStmt: IF OPEN_PAREN Expr CLOSE_PAREN Stmt ELSE . Stmt

    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    WHILE       shift, and go to state 11
    IF          shift, and go to state 12

    Stmt      go to state 105
    IfStmt    go to state 16
    LValue    go to state 17
    FuncCall  go to state 18


State 103

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN $@1 . scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    $default  reduce using rule 14 (scope_enter)

    scope_enter  go to state 106


State 104

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter . ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    TYPE  shift, and go to state 107

    $default  reduce using rule 17 (ParamList)

    Param      go to state 108
    ParamList  go to state 109


State 105

   37 IfStmt: IF OPEN_PAREN Expr CLOSE_PAREN Stmt ELSE Stmt .

    $default  reduce using rule 37 (IfStmt)


State 106

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN $@1 scope_enter . OPEN_BRACE StmtList CLOSE_BRACE scope_exit

    OPEN_BRACE  shift, and go to state 110


State 107

   16 Param: TYPE . ID

    ID  shift, and go to state 111


State 108

   18 ParamList: Param .
   19          | Param . COMMA ParamList

    COMMA  shift, and go to state 112

    $default  reduce using rule 18 (ParamList)


State 109

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList . CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    CLOSE_PAREN  shift, and go to state 113


State 110

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN $@1 scope_enter OPEN_BRACE . StmtList CLOSE_BRACE scope_exit

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    WHILE       shift, and go to state 11
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 12

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 13
    StmtList  go to state 114
    Stmt      go to state 15
    Type      go to state 6
    IfStmt    go to state 16
    LValue    go to state 17
    FuncCall  go to state 18


State 111

   16 Param: TYPE ID .

    $default  reduce using rule 16 (Param)


State 112

   19 ParamList: Param COMMA . ParamList

    TYPE  shift, and go to state 107

    $default  reduce using rule 17 (ParamList)

    Param      go to state 108
    ParamList  go to state 115


State 113

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN . OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit

    OPEN_BRACE  shift, and go to state 116


State 114

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN $@1 scope_enter OPEN_BRACE StmtList . CLOSE_BRACE scope_exit

    CLOSE_BRACE  shift, and go to state 117


State 115

   19 ParamList: Param COMMA ParamList .

    $default  reduce using rule 19 (ParamList)


State 116

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE . StmtList ReturnStmt CLOSE_BRACE scope_exit

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 8
    OPEN_BRACE  shift, and go to state 9
    ID          shift, and go to state 10
    WHILE       shift, and go to state 11
    TYPE_BOOL   shift, and go to state 2
    IF          shift, and go to state 12

    $default  reduce using rule 25 (StmtList)

    VarDecl   go to state 13
    StmtList  go to state 118
    Stmt      go to state 15
    Type      go to state 6
    IfStmt    go to state 16
    LValue    go to state 17
    FuncCall  go to state 18


State 117

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN $@1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE . scope_exit

    $default  reduce using rule 15 (scope_exit)

    scope_exit  go to state 119


State 118

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList . ReturnStmt CLOSE_BRACE scope_exit

    RETURN  shift, and go to state 120

    $default  reduce using rule 22 (ReturnStmt)

    ReturnStmt  go to state 121


State 119

    5 MainFunc: VOID MAIN OPEN_PAREN CLOSE_PAREN $@1 scope_enter OPEN_BRACE StmtList CLOSE_BRACE scope_exit .

    $default  reduce using rule 5 (MainFunc)


State 120

   20 ReturnStmt: RETURN . Expr SEMICOLON
   21           | RETURN . SEMICOLON

    NUMBER         shift, and go to state 21
    FLOAT_LITERAL  shift, and go to state 22
    SEMICOLON      shift, and go to state 122
    OPEN_PAREN     shift, and go to state 23
    ID             shift, and go to state 24
    BOOL_LITERAL   shift, and go to state 25
    NOT            shift, and go to state 26

    Expr      go to state 123
    FuncCall  go to state 28


State 121

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt . CLOSE_BRACE scope_exit

    CLOSE_BRACE  shift, and go to state 124


State 122

   21 ReturnStmt: RETURN SEMICOLON .

    $default  reduce using rule 21 (ReturnStmt)


State 123

   20 ReturnStmt: RETURN Expr . SEMICOLON
   41 Expr: Expr . BinOp Expr
   42     | Expr . AND Expr
   43     | Expr . OR Expr
   45     | Expr . EQUALS Expr
   46     | Expr . NOT_EQUALS Expr
   47     | Expr . LESS_THAN Expr
   48     | Expr . GREATER_THAN Expr
   49     | Expr . LESS_EQUAL Expr
   50     | Expr . GREATER_EQUAL Expr

    SEMICOLON      shift, and go to state 125
    PLUS           shift, and go to state 46
    MINUS          shift, and go to state 47
    MULTIPLY       shift, and go to state 48
    DIVIDE         shift, and go to state 49
    AND            shift, and go to state 50
    OR             shift, and go to state 51
    EQUALS         shift, and go to state 52
    NOT_EQUALS     shift, and go to state 53
    LESS_THAN      shift, and go to state 54
    GREATER_THAN   shift, and go to state 55
    LESS_EQUAL     shift, and go to state 56
    GREATER_EQUAL  shift, and go to state 57

    BinOp  go to state 58


State 124

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE . scope_exit

    $default  reduce using rule 15 (scope_exit)

    scope_exit  go to state 126


State 125

   20 ReturnStmt: RETURN Expr SEMICOLON .

    $default  reduce using rule 20 (ReturnStmt)


State 126

    9 FuncDecl: ReturnType SetFunctionName OPEN_PAREN scope_enter ParamList CLOSE_PAREN OPEN_BRACE StmtList ReturnStmt CLOSE_BRACE scope_exit .

    $default  reduce using rule 9 (FuncDecl)
