Rules never reduced

   29 VarDeclList: /* empty */


State 0 conflicts: 5 shift/reduce, 5 reduce/reduce
State 12 conflicts: 1 shift/reduce
State 13 conflicts: 1 reduce/reduce
State 14 conflicts: 1 shift/reduce
State 15 conflicts: 1 reduce/reduce
State 16 conflicts: 4 shift/reduce, 5 reduce/reduce
State 72 conflicts: 4 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: CompleteProgram
    2        | PartialProgram
    3        | OnlyVarDecls
    4        | OnlyFuncs
    5        | OnlyStmts
    6        | /* empty */

    7 CompleteProgram: GlobalDeclList FuncDeclList StmtList
    8                | FuncDeclList StmtList

    9 PartialProgram: VarDeclList StmtList

   10 OnlyVarDecls: VarDeclList

   11 OnlyFuncs: FuncDeclList

   12 OnlyStmts: StmtList

   13 GlobalDeclList: /* empty */
   14               | VarDecl GlobalDeclList

   15 FuncDeclList: /* empty */
   16             | FuncDecl FuncDeclList

   17 FuncDecl: TYPE ID OPEN_PAREN ParamList CLOSE_PAREN SEMICOLON
   18         | VOID ID OPEN_PAREN ParamList CLOSE_PAREN SEMICOLON
   19         | TYPE ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList ReturnStmt CLOSE_BRACE scope_exit
   20         | VOID ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList CLOSE_BRACE scope_exit

   21 scope_enter: /* empty */

   22 scope_exit: /* empty */

   23 Param: TYPE ID

   24 ParamList: /* empty */
   25          | Param
   26          | Param COMMA ParamList

   27 ReturnStmt: RETURN Expr SEMICOLON
   28           | /* empty */

   29 VarDeclList: /* empty */
   30            | VarDecl VarDeclList

   31 VarDecl: TYPE ID SEMICOLON
   32        | TYPE ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

   33 StmtList: /* empty */
   34         | Stmt StmtList
   35         | VarDecl StmtList

   36 Stmt: LValue EQ Expr SEMICOLON
   37     | WRITE Expr SEMICOLON
   38     | FuncCall SEMICOLON
   39     | OPEN_BRACE StmtList CLOSE_BRACE

   40 LValue: ID
   41       | ID OPEN_BRACKET Expr CLOSE_BRACKET

   42 Expr: Expr BinOp Expr
   43     | NUMBER
   44     | FLOAT_LITERAL
   45     | ID
   46     | FuncCall
   47     | ID OPEN_BRACKET Expr CLOSE_BRACKET
   48     | OPEN_PAREN Expr CLOSE_PAREN

   49 FuncCall: ID OPEN_PAREN ArgList CLOSE_PAREN

   50 ArgList: /* empty */
   51        | Expr
   52        | Expr COMMA ArgList

   53 BinOp: PLUS
   54      | MINUS
   55      | MULTIPLY
   56      | DIVIDE


Terminals, with rules where they appear

$end (0) 0
error (256)
TYPE (258) 17 19 23 31 32
NUMBER (259) 32 43
FLOAT_LITERAL (260) 44
SEMICOLON (261) 17 18 27 31 32 36 37 38
EQ (262) 36
PLUS (263) 53
MINUS (264) 54
MULTIPLY (265) 55
DIVIDE (266) 56
WRITE (267) 37
OPEN_BRACE (268) 19 20 39
CLOSE_BRACE (269) 19 20 39
OPEN_PAREN (270) 17 18 19 20 48 49
CLOSE_PAREN (271) 17 18 19 20 48 49
ID (272) 17 18 19 20 23 31 32 40 41 45 47 49
OPEN_BRACKET (273) 32 41 47
CLOSE_BRACKET (274) 32 41 47
RETURN (275) 27
VOID (276) 18 20
COMMA (277) 26 52


Nonterminals, with rules where they appear

$accept (23)
    on left: 0
Program (24)
    on left: 1 2 3 4 5 6, on right: 0
CompleteProgram (25)
    on left: 7 8, on right: 1
PartialProgram (26)
    on left: 9, on right: 2
OnlyVarDecls (27)
    on left: 10, on right: 3
OnlyFuncs (28)
    on left: 11, on right: 4
OnlyStmts (29)
    on left: 12, on right: 5
GlobalDeclList (30)
    on left: 13 14, on right: 7 14
FuncDeclList (31)
    on left: 15 16, on right: 7 8 11 16
FuncDecl (32)
    on left: 17 18 19 20, on right: 16
scope_enter (33)
    on left: 21, on right: 19 20
scope_exit (34)
    on left: 22, on right: 19 20
Param (35)
    on left: 23, on right: 25 26
ParamList (36)
    on left: 24 25 26, on right: 17 18 19 20 26
ReturnStmt (37)
    on left: 27 28, on right: 19
VarDeclList (38)
    on left: 29 30, on right: 9 10 30
VarDecl (39)
    on left: 31 32, on right: 14 30 35
StmtList (40)
    on left: 33 34 35, on right: 7 8 9 12 19 20 34 35 39
Stmt (41)
    on left: 36 37 38 39, on right: 34
LValue (42)
    on left: 40 41, on right: 36
Expr (43)
    on left: 42 43 44 45 46 47 48, on right: 27 36 37 41 42 47 48 51
    52
FuncCall (44)
    on left: 49, on right: 38 46
ArgList (45)
    on left: 50 51 52, on right: 49 52
BinOp (46)
    on left: 53 54 55 56, on right: 42


state 0

    0 $accept: . Program $end

    TYPE        shift, and go to state 1
    WRITE       shift, and go to state 2
    OPEN_BRACE  shift, and go to state 3
    ID          shift, and go to state 4
    VOID        shift, and go to state 5

    $end        reduce using rule 6 (Program)
    $end        [reduce using rule 13 (GlobalDeclList)]
    $end        [reduce using rule 15 (FuncDeclList)]
    $end        [reduce using rule 29 (VarDeclList)]
    $end        [reduce using rule 33 (StmtList)]
    TYPE        [reduce using rule 13 (GlobalDeclList)]
    TYPE        [reduce using rule 15 (FuncDeclList)]
    TYPE        [reduce using rule 29 (VarDeclList)]
    WRITE       [reduce using rule 13 (GlobalDeclList)]
    WRITE       [reduce using rule 15 (FuncDeclList)]
    WRITE       [reduce using rule 29 (VarDeclList)]
    OPEN_BRACE  [reduce using rule 13 (GlobalDeclList)]
    OPEN_BRACE  [reduce using rule 15 (FuncDeclList)]
    OPEN_BRACE  [reduce using rule 29 (VarDeclList)]
    ID          [reduce using rule 13 (GlobalDeclList)]
    ID          [reduce using rule 15 (FuncDeclList)]
    ID          [reduce using rule 29 (VarDeclList)]
    VOID        [reduce using rule 13 (GlobalDeclList)]
    $default    reduce using rule 6 (Program)

    Program          go to state 6
    CompleteProgram  go to state 7
    PartialProgram   go to state 8
    OnlyVarDecls     go to state 9
    OnlyFuncs        go to state 10
    OnlyStmts        go to state 11
    GlobalDeclList   go to state 12
    FuncDeclList     go to state 13
    FuncDecl         go to state 14
    VarDeclList      go to state 15
    VarDecl          go to state 16
    StmtList         go to state 17
    Stmt             go to state 18
    LValue           go to state 19
    FuncCall         go to state 20


state 1

   17 FuncDecl: TYPE . ID OPEN_PAREN ParamList CLOSE_PAREN SEMICOLON
   19         | TYPE . ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList ReturnStmt CLOSE_BRACE scope_exit
   31 VarDecl: TYPE . ID SEMICOLON
   32        | TYPE . ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

    ID  shift, and go to state 21


state 2

   37 Stmt: WRITE . Expr SEMICOLON

    NUMBER         shift, and go to state 22
    FLOAT_LITERAL  shift, and go to state 23
    OPEN_PAREN     shift, and go to state 24
    ID             shift, and go to state 25

    Expr      go to state 26
    FuncCall  go to state 27


state 3

   39 Stmt: OPEN_BRACE . StmtList CLOSE_BRACE

    TYPE        shift, and go to state 28
    WRITE       shift, and go to state 2
    OPEN_BRACE  shift, and go to state 3
    ID          shift, and go to state 4

    $default  reduce using rule 33 (StmtList)

    VarDecl   go to state 29
    StmtList  go to state 30
    Stmt      go to state 18
    LValue    go to state 19
    FuncCall  go to state 20


state 4

   40 LValue: ID .
   41       | ID . OPEN_BRACKET Expr CLOSE_BRACKET
   49 FuncCall: ID . OPEN_PAREN ArgList CLOSE_PAREN

    OPEN_PAREN    shift, and go to state 31
    OPEN_BRACKET  shift, and go to state 32

    $default  reduce using rule 40 (LValue)


state 5

   18 FuncDecl: VOID . ID OPEN_PAREN ParamList CLOSE_PAREN SEMICOLON
   20         | VOID . ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList CLOSE_BRACE scope_exit

    ID  shift, and go to state 33


state 6

    0 $accept: Program . $end

    $end  shift, and go to state 34


state 7

    1 Program: CompleteProgram .

    $default  reduce using rule 1 (Program)


state 8

    2 Program: PartialProgram .

    $default  reduce using rule 2 (Program)


state 9

    3 Program: OnlyVarDecls .

    $default  reduce using rule 3 (Program)


state 10

    4 Program: OnlyFuncs .

    $default  reduce using rule 4 (Program)


state 11

    5 Program: OnlyStmts .

    $default  reduce using rule 5 (Program)


state 12

    7 CompleteProgram: GlobalDeclList . FuncDeclList StmtList

    TYPE  shift, and go to state 35
    VOID  shift, and go to state 5

    TYPE      [reduce using rule 15 (FuncDeclList)]
    $default  reduce using rule 15 (FuncDeclList)

    FuncDeclList  go to state 36
    FuncDecl      go to state 14


state 13

    8 CompleteProgram: FuncDeclList . StmtList
   11 OnlyFuncs: FuncDeclList .

    TYPE        shift, and go to state 28
    WRITE       shift, and go to state 2
    OPEN_BRACE  shift, and go to state 3
    ID          shift, and go to state 4

    $end      reduce using rule 11 (OnlyFuncs)
    $end      [reduce using rule 33 (StmtList)]
    $default  reduce using rule 11 (OnlyFuncs)

    VarDecl   go to state 29
    StmtList  go to state 37
    Stmt      go to state 18
    LValue    go to state 19
    FuncCall  go to state 20


state 14

   16 FuncDeclList: FuncDecl . FuncDeclList

    TYPE  shift, and go to state 35
    VOID  shift, and go to state 5

    TYPE      [reduce using rule 15 (FuncDeclList)]
    $default  reduce using rule 15 (FuncDeclList)

    FuncDeclList  go to state 38
    FuncDecl      go to state 14


state 15

    9 PartialProgram: VarDeclList . StmtList
   10 OnlyVarDecls: VarDeclList .

    TYPE        shift, and go to state 28
    WRITE       shift, and go to state 2
    OPEN_BRACE  shift, and go to state 3
    ID          shift, and go to state 4

    $end      reduce using rule 10 (OnlyVarDecls)
    $end      [reduce using rule 33 (StmtList)]
    $default  reduce using rule 10 (OnlyVarDecls)

    VarDecl   go to state 29
    StmtList  go to state 39
    Stmt      go to state 18
    LValue    go to state 19
    FuncCall  go to state 20


state 16

   14 GlobalDeclList: VarDecl . GlobalDeclList
   30 VarDeclList: VarDecl . VarDeclList
   35 StmtList: VarDecl . StmtList

    TYPE        shift, and go to state 28
    WRITE       shift, and go to state 2
    OPEN_BRACE  shift, and go to state 3
    ID          shift, and go to state 4

    $end        reduce using rule 13 (GlobalDeclList)
    $end        [reduce using rule 29 (VarDeclList)]
    $end        [reduce using rule 33 (StmtList)]
    TYPE        [reduce using rule 13 (GlobalDeclList)]
    TYPE        [reduce using rule 29 (VarDeclList)]
    WRITE       [reduce using rule 13 (GlobalDeclList)]
    WRITE       [reduce using rule 29 (VarDeclList)]
    OPEN_BRACE  [reduce using rule 13 (GlobalDeclList)]
    OPEN_BRACE  [reduce using rule 29 (VarDeclList)]
    ID          [reduce using rule 13 (GlobalDeclList)]
    ID          [reduce using rule 29 (VarDeclList)]
    $default    reduce using rule 13 (GlobalDeclList)

    GlobalDeclList  go to state 40
    VarDeclList     go to state 41
    VarDecl         go to state 16
    StmtList        go to state 42
    Stmt            go to state 18
    LValue          go to state 19
    FuncCall        go to state 20


state 17

   12 OnlyStmts: StmtList .

    $default  reduce using rule 12 (OnlyStmts)


state 18

   34 StmtList: Stmt . StmtList

    TYPE        shift, and go to state 28
    WRITE       shift, and go to state 2
    OPEN_BRACE  shift, and go to state 3
    ID          shift, and go to state 4

    $default  reduce using rule 33 (StmtList)

    VarDecl   go to state 29
    StmtList  go to state 43
    Stmt      go to state 18
    LValue    go to state 19
    FuncCall  go to state 20


state 19

   36 Stmt: LValue . EQ Expr SEMICOLON

    EQ  shift, and go to state 44


state 20

   38 Stmt: FuncCall . SEMICOLON

    SEMICOLON  shift, and go to state 45


state 21

   17 FuncDecl: TYPE ID . OPEN_PAREN ParamList CLOSE_PAREN SEMICOLON
   19         | TYPE ID . OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList ReturnStmt CLOSE_BRACE scope_exit
   31 VarDecl: TYPE ID . SEMICOLON
   32        | TYPE ID . OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

    SEMICOLON     shift, and go to state 46
    OPEN_PAREN    shift, and go to state 47
    OPEN_BRACKET  shift, and go to state 48


state 22

   43 Expr: NUMBER .

    $default  reduce using rule 43 (Expr)


state 23

   44 Expr: FLOAT_LITERAL .

    $default  reduce using rule 44 (Expr)


state 24

   48 Expr: OPEN_PAREN . Expr CLOSE_PAREN

    NUMBER         shift, and go to state 22
    FLOAT_LITERAL  shift, and go to state 23
    OPEN_PAREN     shift, and go to state 24
    ID             shift, and go to state 25

    Expr      go to state 49
    FuncCall  go to state 27


state 25

   45 Expr: ID .
   47     | ID . OPEN_BRACKET Expr CLOSE_BRACKET
   49 FuncCall: ID . OPEN_PAREN ArgList CLOSE_PAREN

    OPEN_PAREN    shift, and go to state 31
    OPEN_BRACKET  shift, and go to state 50

    $default  reduce using rule 45 (Expr)


state 26

   37 Stmt: WRITE Expr . SEMICOLON
   42 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 51
    PLUS       shift, and go to state 52
    MINUS      shift, and go to state 53
    MULTIPLY   shift, and go to state 54
    DIVIDE     shift, and go to state 55

    BinOp  go to state 56


state 27

   46 Expr: FuncCall .

    $default  reduce using rule 46 (Expr)


state 28

   31 VarDecl: TYPE . ID SEMICOLON
   32        | TYPE . ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

    ID  shift, and go to state 57


state 29

   35 StmtList: VarDecl . StmtList

    TYPE        shift, and go to state 28
    WRITE       shift, and go to state 2
    OPEN_BRACE  shift, and go to state 3
    ID          shift, and go to state 4

    $default  reduce using rule 33 (StmtList)

    VarDecl   go to state 29
    StmtList  go to state 42
    Stmt      go to state 18
    LValue    go to state 19
    FuncCall  go to state 20


state 30

   39 Stmt: OPEN_BRACE StmtList . CLOSE_BRACE

    CLOSE_BRACE  shift, and go to state 58


state 31

   49 FuncCall: ID OPEN_PAREN . ArgList CLOSE_PAREN

    NUMBER         shift, and go to state 22
    FLOAT_LITERAL  shift, and go to state 23
    OPEN_PAREN     shift, and go to state 24
    ID             shift, and go to state 25

    $default  reduce using rule 50 (ArgList)

    Expr      go to state 59
    FuncCall  go to state 27
    ArgList   go to state 60


state 32

   41 LValue: ID OPEN_BRACKET . Expr CLOSE_BRACKET

    NUMBER         shift, and go to state 22
    FLOAT_LITERAL  shift, and go to state 23
    OPEN_PAREN     shift, and go to state 24
    ID             shift, and go to state 25

    Expr      go to state 61
    FuncCall  go to state 27


state 33

   18 FuncDecl: VOID ID . OPEN_PAREN ParamList CLOSE_PAREN SEMICOLON
   20         | VOID ID . OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList CLOSE_BRACE scope_exit

    OPEN_PAREN  shift, and go to state 62


state 34

    0 $accept: Program $end .

    $default  accept


state 35

   17 FuncDecl: TYPE . ID OPEN_PAREN ParamList CLOSE_PAREN SEMICOLON
   19         | TYPE . ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList ReturnStmt CLOSE_BRACE scope_exit

    ID  shift, and go to state 63


state 36

    7 CompleteProgram: GlobalDeclList FuncDeclList . StmtList

    TYPE        shift, and go to state 28
    WRITE       shift, and go to state 2
    OPEN_BRACE  shift, and go to state 3
    ID          shift, and go to state 4

    $default  reduce using rule 33 (StmtList)

    VarDecl   go to state 29
    StmtList  go to state 64
    Stmt      go to state 18
    LValue    go to state 19
    FuncCall  go to state 20


state 37

    8 CompleteProgram: FuncDeclList StmtList .

    $default  reduce using rule 8 (CompleteProgram)


state 38

   16 FuncDeclList: FuncDecl FuncDeclList .

    $default  reduce using rule 16 (FuncDeclList)


state 39

    9 PartialProgram: VarDeclList StmtList .

    $default  reduce using rule 9 (PartialProgram)


state 40

   14 GlobalDeclList: VarDecl GlobalDeclList .

    $default  reduce using rule 14 (GlobalDeclList)


state 41

   30 VarDeclList: VarDecl VarDeclList .

    $default  reduce using rule 30 (VarDeclList)


state 42

   35 StmtList: VarDecl StmtList .

    $default  reduce using rule 35 (StmtList)


state 43

   34 StmtList: Stmt StmtList .

    $default  reduce using rule 34 (StmtList)


state 44

   36 Stmt: LValue EQ . Expr SEMICOLON

    NUMBER         shift, and go to state 22
    FLOAT_LITERAL  shift, and go to state 23
    OPEN_PAREN     shift, and go to state 24
    ID             shift, and go to state 25

    Expr      go to state 65
    FuncCall  go to state 27


state 45

   38 Stmt: FuncCall SEMICOLON .

    $default  reduce using rule 38 (Stmt)


state 46

   31 VarDecl: TYPE ID SEMICOLON .

    $default  reduce using rule 31 (VarDecl)


state 47

   17 FuncDecl: TYPE ID OPEN_PAREN . ParamList CLOSE_PAREN SEMICOLON
   19         | TYPE ID OPEN_PAREN . ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList ReturnStmt CLOSE_BRACE scope_exit

    TYPE  shift, and go to state 66

    $default  reduce using rule 24 (ParamList)

    Param      go to state 67
    ParamList  go to state 68


state 48

   32 VarDecl: TYPE ID OPEN_BRACKET . NUMBER CLOSE_BRACKET SEMICOLON

    NUMBER  shift, and go to state 69


state 49

   42 Expr: Expr . BinOp Expr
   48     | OPEN_PAREN Expr . CLOSE_PAREN

    PLUS         shift, and go to state 52
    MINUS        shift, and go to state 53
    MULTIPLY     shift, and go to state 54
    DIVIDE       shift, and go to state 55
    CLOSE_PAREN  shift, and go to state 70

    BinOp  go to state 56


state 50

   47 Expr: ID OPEN_BRACKET . Expr CLOSE_BRACKET

    NUMBER         shift, and go to state 22
    FLOAT_LITERAL  shift, and go to state 23
    OPEN_PAREN     shift, and go to state 24
    ID             shift, and go to state 25

    Expr      go to state 71
    FuncCall  go to state 27


state 51

   37 Stmt: WRITE Expr SEMICOLON .

    $default  reduce using rule 37 (Stmt)


state 52

   53 BinOp: PLUS .

    $default  reduce using rule 53 (BinOp)


state 53

   54 BinOp: MINUS .

    $default  reduce using rule 54 (BinOp)


state 54

   55 BinOp: MULTIPLY .

    $default  reduce using rule 55 (BinOp)


state 55

   56 BinOp: DIVIDE .

    $default  reduce using rule 56 (BinOp)


state 56

   42 Expr: Expr BinOp . Expr

    NUMBER         shift, and go to state 22
    FLOAT_LITERAL  shift, and go to state 23
    OPEN_PAREN     shift, and go to state 24
    ID             shift, and go to state 25

    Expr      go to state 72
    FuncCall  go to state 27


state 57

   31 VarDecl: TYPE ID . SEMICOLON
   32        | TYPE ID . OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON

    SEMICOLON     shift, and go to state 46
    OPEN_BRACKET  shift, and go to state 48


state 58

   39 Stmt: OPEN_BRACE StmtList CLOSE_BRACE .

    $default  reduce using rule 39 (Stmt)


state 59

   42 Expr: Expr . BinOp Expr
   51 ArgList: Expr .
   52        | Expr . COMMA ArgList

    PLUS      shift, and go to state 52
    MINUS     shift, and go to state 53
    MULTIPLY  shift, and go to state 54
    DIVIDE    shift, and go to state 55
    COMMA     shift, and go to state 73

    $default  reduce using rule 51 (ArgList)

    BinOp  go to state 56


state 60

   49 FuncCall: ID OPEN_PAREN ArgList . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 74


state 61

   41 LValue: ID OPEN_BRACKET Expr . CLOSE_BRACKET
   42 Expr: Expr . BinOp Expr

    PLUS           shift, and go to state 52
    MINUS          shift, and go to state 53
    MULTIPLY       shift, and go to state 54
    DIVIDE         shift, and go to state 55
    CLOSE_BRACKET  shift, and go to state 75

    BinOp  go to state 56


state 62

   18 FuncDecl: VOID ID OPEN_PAREN . ParamList CLOSE_PAREN SEMICOLON
   20         | VOID ID OPEN_PAREN . ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList CLOSE_BRACE scope_exit

    TYPE  shift, and go to state 66

    $default  reduce using rule 24 (ParamList)

    Param      go to state 67
    ParamList  go to state 76


state 63

   17 FuncDecl: TYPE ID . OPEN_PAREN ParamList CLOSE_PAREN SEMICOLON
   19         | TYPE ID . OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList ReturnStmt CLOSE_BRACE scope_exit

    OPEN_PAREN  shift, and go to state 47


state 64

    7 CompleteProgram: GlobalDeclList FuncDeclList StmtList .

    $default  reduce using rule 7 (CompleteProgram)


state 65

   36 Stmt: LValue EQ Expr . SEMICOLON
   42 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 77
    PLUS       shift, and go to state 52
    MINUS      shift, and go to state 53
    MULTIPLY   shift, and go to state 54
    DIVIDE     shift, and go to state 55

    BinOp  go to state 56


state 66

   23 Param: TYPE . ID

    ID  shift, and go to state 78


state 67

   25 ParamList: Param .
   26          | Param . COMMA ParamList

    COMMA  shift, and go to state 79

    $default  reduce using rule 25 (ParamList)


state 68

   17 FuncDecl: TYPE ID OPEN_PAREN ParamList . CLOSE_PAREN SEMICOLON
   19         | TYPE ID OPEN_PAREN ParamList . CLOSE_PAREN OPEN_BRACE scope_enter StmtList ReturnStmt CLOSE_BRACE scope_exit

    CLOSE_PAREN  shift, and go to state 80


state 69

   32 VarDecl: TYPE ID OPEN_BRACKET NUMBER . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET  shift, and go to state 81


state 70

   48 Expr: OPEN_PAREN Expr CLOSE_PAREN .

    $default  reduce using rule 48 (Expr)


state 71

   42 Expr: Expr . BinOp Expr
   47     | ID OPEN_BRACKET Expr . CLOSE_BRACKET

    PLUS           shift, and go to state 52
    MINUS          shift, and go to state 53
    MULTIPLY       shift, and go to state 54
    DIVIDE         shift, and go to state 55
    CLOSE_BRACKET  shift, and go to state 82

    BinOp  go to state 56


state 72

   42 Expr: Expr . BinOp Expr
   42     | Expr BinOp Expr .

    PLUS      shift, and go to state 52
    MINUS     shift, and go to state 53
    MULTIPLY  shift, and go to state 54
    DIVIDE    shift, and go to state 55

    PLUS      [reduce using rule 42 (Expr)]
    MINUS     [reduce using rule 42 (Expr)]
    MULTIPLY  [reduce using rule 42 (Expr)]
    DIVIDE    [reduce using rule 42 (Expr)]
    $default  reduce using rule 42 (Expr)

    BinOp  go to state 56


state 73

   52 ArgList: Expr COMMA . ArgList

    NUMBER         shift, and go to state 22
    FLOAT_LITERAL  shift, and go to state 23
    OPEN_PAREN     shift, and go to state 24
    ID             shift, and go to state 25

    $default  reduce using rule 50 (ArgList)

    Expr      go to state 59
    FuncCall  go to state 27
    ArgList   go to state 83


state 74

   49 FuncCall: ID OPEN_PAREN ArgList CLOSE_PAREN .

    $default  reduce using rule 49 (FuncCall)


state 75

   41 LValue: ID OPEN_BRACKET Expr CLOSE_BRACKET .

    $default  reduce using rule 41 (LValue)


state 76

   18 FuncDecl: VOID ID OPEN_PAREN ParamList . CLOSE_PAREN SEMICOLON
   20         | VOID ID OPEN_PAREN ParamList . CLOSE_PAREN OPEN_BRACE scope_enter StmtList CLOSE_BRACE scope_exit

    CLOSE_PAREN  shift, and go to state 84


state 77

   36 Stmt: LValue EQ Expr SEMICOLON .

    $default  reduce using rule 36 (Stmt)


state 78

   23 Param: TYPE ID .

    $default  reduce using rule 23 (Param)


state 79

   26 ParamList: Param COMMA . ParamList

    TYPE  shift, and go to state 66

    $default  reduce using rule 24 (ParamList)

    Param      go to state 67
    ParamList  go to state 85


state 80

   17 FuncDecl: TYPE ID OPEN_PAREN ParamList CLOSE_PAREN . SEMICOLON
   19         | TYPE ID OPEN_PAREN ParamList CLOSE_PAREN . OPEN_BRACE scope_enter StmtList ReturnStmt CLOSE_BRACE scope_exit

    SEMICOLON   shift, and go to state 86
    OPEN_BRACE  shift, and go to state 87


state 81

   32 VarDecl: TYPE ID OPEN_BRACKET NUMBER CLOSE_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 88


state 82

   47 Expr: ID OPEN_BRACKET Expr CLOSE_BRACKET .

    $default  reduce using rule 47 (Expr)


state 83

   52 ArgList: Expr COMMA ArgList .

    $default  reduce using rule 52 (ArgList)


state 84

   18 FuncDecl: VOID ID OPEN_PAREN ParamList CLOSE_PAREN . SEMICOLON
   20         | VOID ID OPEN_PAREN ParamList CLOSE_PAREN . OPEN_BRACE scope_enter StmtList CLOSE_BRACE scope_exit

    SEMICOLON   shift, and go to state 89
    OPEN_BRACE  shift, and go to state 90


state 85

   26 ParamList: Param COMMA ParamList .

    $default  reduce using rule 26 (ParamList)


state 86

   17 FuncDecl: TYPE ID OPEN_PAREN ParamList CLOSE_PAREN SEMICOLON .

    $default  reduce using rule 17 (FuncDecl)


state 87

   19 FuncDecl: TYPE ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE . scope_enter StmtList ReturnStmt CLOSE_BRACE scope_exit

    $default  reduce using rule 21 (scope_enter)

    scope_enter  go to state 91


state 88

   32 VarDecl: TYPE ID OPEN_BRACKET NUMBER CLOSE_BRACKET SEMICOLON .

    $default  reduce using rule 32 (VarDecl)


state 89

   18 FuncDecl: VOID ID OPEN_PAREN ParamList CLOSE_PAREN SEMICOLON .

    $default  reduce using rule 18 (FuncDecl)


state 90

   20 FuncDecl: VOID ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE . scope_enter StmtList CLOSE_BRACE scope_exit

    $default  reduce using rule 21 (scope_enter)

    scope_enter  go to state 92


state 91

   19 FuncDecl: TYPE ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter . StmtList ReturnStmt CLOSE_BRACE scope_exit

    TYPE        shift, and go to state 28
    WRITE       shift, and go to state 2
    OPEN_BRACE  shift, and go to state 3
    ID          shift, and go to state 4

    $default  reduce using rule 33 (StmtList)

    VarDecl   go to state 29
    StmtList  go to state 93
    Stmt      go to state 18
    LValue    go to state 19
    FuncCall  go to state 20


state 92

   20 FuncDecl: VOID ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter . StmtList CLOSE_BRACE scope_exit

    TYPE        shift, and go to state 28
    WRITE       shift, and go to state 2
    OPEN_BRACE  shift, and go to state 3
    ID          shift, and go to state 4

    $default  reduce using rule 33 (StmtList)

    VarDecl   go to state 29
    StmtList  go to state 94
    Stmt      go to state 18
    LValue    go to state 19
    FuncCall  go to state 20


state 93

   19 FuncDecl: TYPE ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList . ReturnStmt CLOSE_BRACE scope_exit

    RETURN  shift, and go to state 95

    $default  reduce using rule 28 (ReturnStmt)

    ReturnStmt  go to state 96


state 94

   20 FuncDecl: VOID ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList . CLOSE_BRACE scope_exit

    CLOSE_BRACE  shift, and go to state 97


state 95

   27 ReturnStmt: RETURN . Expr SEMICOLON

    NUMBER         shift, and go to state 22
    FLOAT_LITERAL  shift, and go to state 23
    OPEN_PAREN     shift, and go to state 24
    ID             shift, and go to state 25

    Expr      go to state 98
    FuncCall  go to state 27


state 96

   19 FuncDecl: TYPE ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList ReturnStmt . CLOSE_BRACE scope_exit

    CLOSE_BRACE  shift, and go to state 99


state 97

   20 FuncDecl: VOID ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList CLOSE_BRACE . scope_exit

    $default  reduce using rule 22 (scope_exit)

    scope_exit  go to state 100


state 98

   27 ReturnStmt: RETURN Expr . SEMICOLON
   42 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 101
    PLUS       shift, and go to state 52
    MINUS      shift, and go to state 53
    MULTIPLY   shift, and go to state 54
    DIVIDE     shift, and go to state 55

    BinOp  go to state 56


state 99

   19 FuncDecl: TYPE ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList ReturnStmt CLOSE_BRACE . scope_exit

    $default  reduce using rule 22 (scope_exit)

    scope_exit  go to state 102


state 100

   20 FuncDecl: VOID ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList CLOSE_BRACE scope_exit .

    $default  reduce using rule 20 (FuncDecl)


state 101

   27 ReturnStmt: RETURN Expr SEMICOLON .

    $default  reduce using rule 27 (ReturnStmt)


state 102

   19 FuncDecl: TYPE ID OPEN_PAREN ParamList CLOSE_PAREN OPEN_BRACE scope_enter StmtList ReturnStmt CLOSE_BRACE scope_exit .

    $default  reduce using rule 19 (FuncDecl)
